<?php
class ModelModuleSuperCategoryMenuAdvanced extends Model {
	
public function getAtributesFiltered($products = array(), $data= array(), $attributes =array(),$what=''){ 
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
		
		$attributes_data = $this->getCacheSMBD(
		'attribute_filters_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
	
		
		if (!$attributes_data) {	
		    $attributes_data = array();
			$sql = "SELECT pa.text, p.product_id, pa.attribute_id as id
				FROM " . DB_PREFIX . "product_attribute pa
				LEFT JOIN " . DB_PREFIX . "product p ON (pa.product_id=p.product_id) 
				WHERE
				p.product_id IN (".implode(', ',array_values($products)).")
				AND
				pa.attribute_id IN (".implode(', ',array_values($attributes)).")
				AND
				pa.language_id=". (int)$this->config->get('config_language_id');
		
			$query =  $this->db->query($sql);
			$value_total=1;
			
			foreach ($query->rows as $key=> $value){
				if (isset($attributes_data[$value['id']][$value['text']]['total'])){
					$value_total = $attributes_data[$value['id']][$value['text']]['total'] + 1;
				}else{
					$value_total=1;
				}
				
		       $attributes_data[$value['id']][$value['text']] = array(
					'total' => $value_total,
					'text'	=> $value['text'],
					'attribute_id' => $value['id']
				);
			}

			
			
		$this->setCacheSMBD(
		'attribute_filters_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.'  .
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache, 
		$attributes_data,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what,
		$string);	
		} 	
			
		return $attributes_data;
	
	}



public function getProductInfosFiltered($products = array(), $data= array(), $where, $id,$what=''){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
				
		$product_info_data =  $this->getCacheSMBD(
		$where.'_filters_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' .  
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
		if (!$product_info_data) {	
	
			$product_info_data = array();
			
			$sql = "SELECT ".$where.", COUNT( * ) AS total
			FROM " . DB_PREFIX . "product p			
			WHERE
			p.product_id IN (".implode(', ',array_values($products)).")			
			GROUP BY ".$where."";

				$query =  $this->db->query($sql);
				$value_total=1;
			 
				foreach ($query->rows as $key=> $value){
					
				  $product_info_data[$id][$value[$where]] = array(
						'total' => $value['total'],
						'text'	=> $value[$where],
						'product_info_id' => $id
				  );
			     }

		
		$this->setCacheSMBD(
		$where.'filters_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.'  .
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache, 
		$product_info_data,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what,
		$string);	
		} 		
				 	
			
		return $product_info_data;
	
	}


public function getOptionsFiltered($products = array(), $data= array(), $options= array(),$what=''){
		$settings_module=$this->config->get('supercategorymenuadvanced_settings');
		$this->load->model('tool/image');
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
		$options_data =  $this->getCacheSMBD(
		'options_filters_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id')  . '.' .  
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
				
		if (!$options_data) {
		
		$options_data = array();	
		
			$sql="SELECT ovd.name as name, pov.option_id as id,p.product_id, op.image, ovd.option_value_id,op.sort_order
			FROM " . DB_PREFIX . "product_option_value pov 
			LEFT JOIN " . DB_PREFIX . "option_value_description ovd ON (pov.option_value_id=ovd.option_value_id) 
			LEFT JOIN " . DB_PREFIX . "product p ON (pov.product_id=p.product_id) 
			LEFT JOIN " . DB_PREFIX . "option_value op ON (pov.option_value_id=op.option_value_id) 
			
			WHERE
			p.product_id IN (".implode(', ',array_values($products)).") 
			AND 
			pov.quantity > 0 
			AND
			pov.option_id IN (".implode(', ',array_values($options)).")
			AND
			ovd.language_id = " . (int)$this->config->get('config_language_id') ." 
			ORDER BY op.sort_order ASC";
				
			$query =  $this->db->query($sql);
			
			$value_total=1;
			
			foreach ($query->rows as $key=> $value){
				if (isset($options_data[$value['id']][$value['name']]['total'])){
					$value_total = $options_data[$value['id']][$value['name']]['total'] + 1;
				}else{
					$value_total=1;
				}
			
				if ($value['image']) {
					
					if ($settings_module['image_option_width'] && $settings_module['image_option_height'] ){
					   $image = $this->model_tool_image->resize($value['image'], $settings_module['image_option_width'],$settings_module['image_option_height']);
					}else{
						if (!file_exists(DIR_IMAGE . $value['image']) || !is_file(DIR_IMAGE . $value['image'])) {
							$image= '';
						} else{
							$info = getimagesize(DIR_IMAGE . $value['image']);
							$image = $this->model_tool_image->resize($value['image'],$info[0],$info[1]);

						}
		
					}
				} else {
					$image= '';
				}
			
				$options_data[$value['id']][$value['name']] = array(
					'total' => $value_total,
					'text'	=> $value['name'],
					'option_id' => $value['id'],
					'image_thumb' =>$image,
					'option_value_id'=>$value['option_value_id'],
					'order'=>$value['sort_order']
				);
			}

		
		$this->setCacheSMBD(
		'options_filters_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.'  .
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache, 
		$options_data,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what,
		$string);	
	
		} 	
		
		
			return $options_data;
	
	}




public function getReviewsFiltered($products = array(), $data= array(),$tipo,$what=''){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
		$reviews_data =  $this->getCacheSMBD(
		'reviews_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' .  
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
		if (!$reviews_data) {	
		
			$reviews_data = array();
			if ($tipo=="avg"){
			
			$sql = "SELECT product_id,AVG(rating) AS total FROM " . DB_PREFIX . "review r WHERE r.product_id IN (".implode(', ',array_values($products)).") AND r.status = '1' GROUP BY r.product_id" ;
			$query =  $this->db->query($sql);
			$value_total=0;
			
				foreach ($query->rows as $key=> $value){
					
					if(!empty($reviews_data)){
						$value_total = 1;
					
						if(array_key_exists((int)round($value['total']),$reviews_data)){
						$value_total = $reviews_data[(int)round($value['total'])]['total'] + 1;
						}
									
					}else{
					
						$value_total = 1;
						
					}
						$reviews_data[(int)$value['total']] = array(
							'total' => $value_total,
							'rating'	=> (int)round($value['total']),
														
						);
					
				}
				
			}elseif ($tipo=="num"){
			
			
			$sql = "SELECT rating,Count(rating) as total FROM " . DB_PREFIX . "review r WHERE r.product_id IN (".implode(', ',array_values($products)).") AND r.status = '1' GROUP BY r.rating" ;	
			$query =  $this->db->query($sql);
			$value_total=0;
			
				foreach ($query->rows as $key=> $value){
					
					$reviews_data[(int)$value['rating']] = array(
							'total' => (int)$value['total'],
							'rating'	=> $value['rating'],
														
						);
				}
			}
			
		$this->setCacheSMBD(
		'reviews_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.'  .
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache, 
		$reviews_data,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what,
		$string);	
						
		} 	

			
			return $reviews_data;
	
	}

	public function getManufacturesFiltered($products = array(), $data= array(),$what=''){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
		$manufacturer_data =  $this->getCacheSMBD(
		'manufactures_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id')  . '.' .  
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
		if (!$manufacturer_data) {	
		
			$manufacturer_data = array();
			
			$sql = "SELECT DISTINCT m.name, p.product_id, m.manufacturer_id,m.image,m.sort_order
				FROM " . DB_PREFIX . "manufacturer m 
				LEFT JOIN " . DB_PREFIX . "product p ON (m.manufacturer_id=p.manufacturer_id) 
				WHERE
				p.product_id IN (".implode(', ',array_values($products)).") 
				ORDER BY m.sort_order ASC";
		
				$query =  $this->db->query($sql);
				$value_total=0;
			
				foreach ($query->rows as $key=> $value){
					
					if(!empty($manufacturer_data)){
						$value_total = 1;
					
						if(array_key_exists($value['name'],$manufacturer_data)){
						$value_total = $manufacturer_data[$value['name']]['total'] + 1;
						}
									
					}else{
					
						$value_total = 1;
						
					}
						$manufacturer_data[$value['name']] = array(
							'total' => $value_total,
							'name'	=> $value['name'],
							'manufacturer_id' => $value['manufacturer_id'],
							'image'	=>$value['image'],
							'order' => $value['sort_order']
							
						);
					
				}
		
			
		$this->setCacheSMBD(
		'manufactures_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.'  .
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache, 
		$manufacturer_data,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what,
		$string);	
		
		} 	

			return $manufacturer_data;
	
	}
	
	public function getStocksFiltered($products = array(), $data= array(), $recalcular=false,$what=''){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
		$stockstatus_data =  $this->getCacheSMBD(
		'stocks_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' .  
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
		if (!$stockstatus_data) {	

		$stockstatus_data = array();
		$sql = "SELECT DISTINCT ss.name, p.product_id, ss.stock_status_id, quantity
			FROM " . DB_PREFIX . "stock_status ss 
			LEFT JOIN " . DB_PREFIX . "product p ON (ss.stock_status_id=p.stock_status_id) 
			WHERE
			p.product_id IN (".implode(', ',array_values($products)).")";
	
		   // $this->language->load('module/supercategorymenuadvanced');
			
			$query =  $this->db->query($sql);
			$value_total=0;
			
			foreach ($query->rows as $key=> $value){
				
				if($recalcular){
					($value['quantity'] > 0) ? $name=$this->language->get('in_stock_values') : $name=$value['name'];
				}else{
					$name=$value['name'];
				}
								
				if(!empty($stockstatus_data)){
					$value_total = 1;
				
					if(array_key_exists($name,$stockstatus_data)){
					$value_total = $stockstatus_data[$name]['total'] + 1;
					}
								
				}else{
				
					$value_total = 1;
					
				}
					$stockstatus_data[$name] = array(
						'total' => $value_total,
						'name'	=> $name,
						'stock_status_id' => $value['stock_status_id']
					);
				
			}
			
			
		$this->setCacheSMBD(
		'stocks_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.'  .
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache, 
		$stockstatus_data,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what,
		$string);	
		
		} 	
						
			return $stockstatus_data;
	

	}
	
	public function getCategoriesFiltered($products = array(), $data= array(),$what=''){
				
	   	$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
		$subcategory_data =  $this->getCacheSMBD(
		'categories_filtered_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
		if (!$subcategory_data) {
								
			$subcategory_data = array();
			
 			$sql= "SELECT * FROM " . DB_PREFIX . "category c 
			LEFT JOIN " . DB_PREFIX . "product_to_category p2c ON (c.category_id =p2c.category_id ) 
			LEFT JOIN " . DB_PREFIX . "category_description cd ON (c.category_id = cd.category_id)
			LEFT JOIN " . DB_PREFIX . "category_to_store c2s ON (c.category_id =c2s.category_id ) 
			WHERE 
			c2s.store_id = '" . (int)$this->config->get('config_store_id') . "'
			AND
			c.parent_id = '" . (int)$data['filter_category_id'] . "' 
			AND
			p2c.product_id IN (".implode(', ',array_values($products)).")
			and cd.language_id=". (int)$this->config->get('config_language_id') . "
			ORDER BY 
			c.sort_order, LCASE(cd.name)";
 
 
			$query =  $this->db->query($sql);
			$value_total=0;
			$subcategory_data = array();
            foreach ($query->rows as $key=> $value){
				
				if(!empty($subcategory_data)){
					$value_total = 1;
				
					if(array_key_exists($value['name'],$subcategory_data)){
					$value_total = $subcategory_data[$value['name']]['total'] + 1;
					}
								
				}else{
				
					$value_total = 1;
					
				}
					$subcategory_data[$value['name']] = array(
						'total' => $value_total,
						'name'	=> $value['name'],
						'category_id' => $value['category_id'],
						'order' => $value['sort_order'],
						'image' =>$value['image'],
						
					);
				
			}
	
		$this->setCacheSMBD(
		'categories_filtered_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.'  .
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache, 
		$subcategory_data,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what,
		$string);
			
		} 	
	
			return $subcategory_data;
	}
		
	

	public function getAttributeName($attribute_id) {
	
		$query = $this->db->query("SELECT name FROM " . DB_PREFIX . "attribute_description WHERE attribute_id = '" . (int)$attribute_id . "' AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
		
	return $query->row['name'];
	}
	
	public function getoptionName($option_id) {
	
		$query = $this->db->query("SELECT name FROM " . DB_PREFIX . "option_description WHERE option_id = '" . (int)$option_id . "' AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
		
	return $query->row['name'];
	}
	
	public function getoptionImage($option_id,$option_name) {
	
		$query = $this->db->query("SELECT image FROM " . DB_PREFIX . "option_value ov 
		LEFT JOIN  " . DB_PREFIX . "option_value_description ovd ON (ov.option_value_id=ovd.option_value_id) 
		WHERE ov.option_id = '" . (int)$option_id . "'
		AND LCASE(ovd.name) = '" . $this->db->escape(utf8_strtolower(str_replace("&amp;","&",$option_name))) . "'
		AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
			
		$this->load->model('tool/image');
		$settings_module=$this->config->get('supercategorymenuadvanced_settings');
		
		
		if ($query->row['image']) {
					
					if ($settings_module['image_option_width'] && $settings_module['image_option_height'] ){
					   $image = $this->model_tool_image->resize($query->row['image'], $settings_module['image_option_width'],$settings_module['image_option_height']);
					}else{
						if (!file_exists(DIR_IMAGE . $query->row['image']) || !is_file(DIR_IMAGE . $query->row['image'])) {
							$image= '';
						} else{
							$info = getimagesize(DIR_IMAGE . $query->row['image']);
							$image = $this->model_tool_image->resize($query->row['image'],$info[0],$info[1]);

						}
		
					}
				} else {
					$image= '';
				}
		
		
		
		return $image;
	
	}
	
	
	public function getCategoryName($category_id) {
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "category_description WHERE category_id = '" . (int)$category_id . "' AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
		return $query->row['name'];
	}
	
	
	
	public function getProductsFiltered($data = array(),$clearance_id, $days,$reviewtipo,$what=''){
	
		$cache = md5(http_build_query($data));
		$string = http_build_query($data);	
		
	    $product_data =  $this->getCacheSMBD(
		'product_filters_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
         if (!$product_data) {
	
	
			if (!empty($data['filter_special'])){
				
				$product_id_NO_seleccionados=$this->GetProductsFilteredSpecial($data,$clearance_id, $days,$reviewtipo);
			
			}else{
				$Products_with_price_filtered=$this->GetProductsFilteredPrice($data,$clearance_id, $days,$reviewtipo);
				$Products_with_special_price_filtered=$this->GetProductsFilteredSpecial($data,$clearance_id, $days,$reviewtipo);
     			$product_id_NO_seleccionados=array_merge((array)$Products_with_price_filtered,(array)$Products_with_special_price_filtered);
				
			}
			
	
		if (!empty($data['filter_by_name'])) {
				
				$explode_data=array();
				$explode_data= explode("@@@",$data['filter_by_name']);
				$explode_data2=array();
				$explode_data2= explode(",",$data['filter_ids']);
				$explode_data3=array(); //have the option_value_id
				$explode_data3= explode(",",$data['filter_options_by_ids']);

				
				$i=0;
				$products_id_seleccionados=array();

				foreach ($explode_data as  $explode){
				 $products_id_query=array();
				
					$pos = strpos($explode,'OPTTOP');
					if ($pos !== false) {// is an option
					
						$sql="SELECT pov.product_id 
						FROM " . DB_PREFIX . "product_option_value pov 
						LEFT JOIN  " . DB_PREFIX . "option_value_description ovd ON (pov.option_value_id=ovd.option_value_id) 
						LEFT JOIN " . DB_PREFIX . "product p ON (pov.product_id = p.product_id)  
						LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) 
						WHERE
						pov.option_id = '" . (int)$explode_data2[$i] . "' 
						AND ovd.option_value_id= '" . (int)$explode_data3[$i] . "'
						
						AND	ovd.language_id = '" . (int)$this->config->get('config_language_id') . "' 
						AND pov.quantity > 0  
					    AND p.status = '1' 
						AND p.date_available <= NOW() 
						AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'";
						
					
						/*
						
						//FIX for empty attribute values.
							if ($explode=="NDDDDDNOPTTOP"){
								$sql.=" AND LCASE(ovd.name)='' GROUP BY product_id";
							}else{
							
								$sql.=" AND LCASE(ovd.name) = '" . $this->db->escape(utf8_strtolower(substr(str_replace("&amp;","&",$explode),0,-6))) . "' GROUP BY product_id";
								
							}
						
						*/					
					}
					
					
				
					$pos = strpos($explode,'ATTNNATT');
					if ($pos !== false) {// is an attribute
				
							$sql= "SELECT p.product_id
							FROM " . DB_PREFIX . "product_attribute pa 
							LEFT JOIN " . DB_PREFIX . "attribute a ON (pa.attribute_id = a.attribute_id) 
							LEFT JOIN " . DB_PREFIX . "attribute_description ad ON (a.attribute_id = ad.attribute_id) 
							LEFT JOIN " . DB_PREFIX . "product p ON (pa.product_id = p.product_id)  
							LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) 
							WHERE
							pa.attribute_id = '" . (int)$explode_data2[$i] . "'
							AND ad.language_id = '" . (int)$this->config->get('config_language_id') . "' 
							AND p.status = '1' 
							AND p.date_available <= NOW() 
							AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'";
							
							//FIX for empty attribute values.
							if ($explode=="NDDDDDNnATTNNATT"){
							
								$sql.=" AND LCASE(pa.text)='' GROUP BY product_id";
							
							}elseif (strpos($explode, "sATTNNATT")){//is slider
							
								utf8_strtolower(substr(str_replace("&amp;","&",$explode),0,-9));
															
								$values=explode(":",utf8_strtolower(substr(str_replace("&amp;","&",$explode),0,-9)));
							
								$sql .= " AND CONVERT(pa.text, signed) BETWEEN '".$this->db->escape($values[0])."' AND '".$this->db->escape($values[1])."'";
							
							}elseif (strpos($explode, "pATTNNATT")){ // is splitted value
								
								//RLIKE '[[:<:]]XL[[:>:]]'
								//\b
								
								$sql.=" AND LCASE(pa.text) REGEXP '[[:<:]]" . $this->db->escape(utf8_strtolower(substr(str_replace("&amp;","&",$explode),0,-9))) . "[[:>:]]'";
								
								
								
								//$sql.=" AND LCASE(p.alpha) REGEXP '^" . $this->db->escape(utf8_strtolower(substr(str_replace("&amp;","&",$explode),0,-9))) . "$'";	
							
							}else{ // is list or select value
							
								$sql.=" AND LCASE(pa.text) = '" . $this->db->escape(utf8_strtolower(substr(str_replace("&amp;","&",$explode),0,-9))) . "' GROUP BY product_id";
								
							}
					
					}
					
	//echo $sql;
	//echo "<br>";
	//echo "<br>";				
						$query2 =  $this->db->query($sql);
			
						foreach ($query2->rows as $key=> $value) {
							$products_id_query[$key] = $value['product_id'];
					    }
			
				
						if(empty($products_id_seleccionados)){
						    $products_id_seleccionados =$products_id_query;
						}else{
							
							
							$products_id_seleccionados =array_intersect((array)$products_id_seleccionados,$products_id_query);
							
							//here is the part to make the menu multiselectable or not
							/***************************************************************************************************
							
							//$products_id_seleccionados =array_merge((array)$products_id_seleccionados,$products_id_query);
							****************************************************************************/
						}
					$i++;
					}
			 
			 		$result = array_intersect($product_id_NO_seleccionados, $products_id_seleccionados);
					 foreach ($result as $key=> $value) {
					    $product_data[$key] = $value;
					}
			
			}else{

			
				$product_data = array();
				foreach ($product_id_NO_seleccionados as $result) {
					
					$product_data[$result] = $result;
					
				}
				
				
		}
				
		$this->setCacheSMBD(
		'product_filters_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.'  .
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache, 
		$product_data,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what,
		$string);
					
		} 
			
		return $product_data;
	}
	
			
	
	private function GetProductsFilteredPrice($data = array(), $clearance_id,$days=7,$reviewtipo){
			
		if ($this->customer->isLogged()) {
			$customer_group_id = $this->customer->getCustomerGroupId();
		} else {
			$customer_group_id = $this->config->get('config_customer_group_id');
		}
			
			 
			$sql = "SELECT p.product_id,(SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$customer_group_id . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special, p.price AS price FROM " . DB_PREFIX . "product p 
				LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) 
				LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id)
				LEFT JOIN " . DB_PREFIX . "product_special ps ON (p.product_id = ps.product_id)"; 

									
				if (!empty($data['filter_category_id'])) {
					$sql .= " LEFT JOIN " . DB_PREFIX . "product_to_category p2c ON (p.product_id = p2c.product_id)";			
				}
			    //$data['filter_rating']=3;	
				if (!empty($data['filter_rating'])) {
					$sql .= " LEFT JOIN " . DB_PREFIX . "review r ON (p.product_id = r.product_id)";			
				}
				
				if(version_compare(VERSION,'1.5.4','<')) {
		     		if (!empty($data['filter_tag'])) {
						$sql .= " LEFT JOIN " . DB_PREFIX . "product_tag pt ON (p.product_id = pt.product_id)";			
					}	
				}
						
			$sql .= " 
			WHERE pd.language_id = '" . (int)$this->config->get('config_language_id') . "' 
			AND p.status = '1' 
			AND p.date_available <= NOW() 
			AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'"; 
			
	       
		    if (!empty($data['filter_category_id']) and $data['filter_category_id']!=0) {
				$sql .= " AND p2c.category_id = '" . (int)$data['filter_category_id'] . "'";
			}
					
			if (!empty($data['filter_manufacturers_by_id'])) {
				$manufacturers = explode(',', substr($data['filter_manufacturers_by_id'],0,-1));
					foreach ($manufacturers as $manufacturer) {
						$implode[] = " p.manufacturer_id = '" . (int)$manufacturer . "'"; 
					}				
							
					if ($implode) {
					$sql .= " AND (" . implode(" OR ", $implode) . ")";
					}
						
			}
			
			if (!empty($data['filter_stock_id'])) {
				$sql .= " AND p.stock_status_id = '" . (int)$data['filter_stock_id'] . "'";
			}
          		   												
			
			if (isset($data['filter_min_price']) && !empty($data['filter_max_price'])) {
				if($data['filter_min_price']==0){

					$data['filter_max_price']=$data['filter_max_price']+1;
					//$data['filter_max_price']=$data['filter_max_price']+1;
				}

				$sql .= " AND ps.price BETWEEN ".$data['filter_min_price']." AND ".$data['filter_max_price'];
			}
			
			if (!empty($data['filter_stock'])) {
				$sql .= " AND p.quantity > 0";
			}
			
			if (!empty($data['filter_clearance'])) {
				$sql .= " AND  p.stock_status_id='".$clearance_id."'";
			}
			if (!empty($data['filter_arrivals'])) {
				$sql .= " AND p.date_added >DATE_SUB(CURDATE(), INTERVAL ".$days." DAY)";
			}
			//$data['filter_rating']=3;
			if (!empty($data['filter_rating'])) {
				if($reviewtipo=="avg"){
					if (strpos($data['filter_rating'], ":")){ //is slider
					    $values=explode(":", $data['filter_rating']);
					    $sql .= " AND (AVG(r.rating) BETWEEN ".$values[0]." AND ".$values[1]." AND r.status='1') ";
			       	}else{
						$sql .= " AND (SELECT CONVERT(AVG(rating) ,signed) AS total FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id)='".$data['filter_rating']."'" ;
					}
				}else{
					$sql .= " AND r.rating='".$data['filter_rating']."'" ;
						
				}
				
			}
			
			
			if (!empty($data['filter_width'])) {
				if (strpos($data['filter_width'], ":")){ //is slider
			 		$values=explode(":", $data['filter_width']);
					$sql .= " AND p.width BETWEEN ".$values[0]." AND ".$values[1];
				}else{
							
					if ($data['filter_width']=="NDDDDDN"){
						$sql .= " AND p.width=''" ;
					}else{
						$sql .= " AND p.width='".$data['filter_width']."'" ;
					}
					
				}
			}
			
			if (!empty($data['filter_height'])) {
				if (strpos($data['filter_height'], ":")){ //is slider
					$values=explode(":", $data['filter_height']);
					$sql .= " AND p.height BETWEEN ".$values[0]." AND ".$values[1];
				}else{
					
					if ($data['filter_height']=="NDDDDDN"){
						$sql .= " AND p.height=''" ;
					}else{
						$sql .= " AND p.height='".$data['filter_height']."'" ;
					}
				}
			}
			if (!empty($data['filter_length'])) {
				if (strpos($data['filter_length'], ":")){ //is slider
					$values=explode(":", $data['filter_length']);
					$sql .= " AND p.length BETWEEN ".$values[0]." AND ".$values[1];
				}else{
					
					if ($data['filter_length']=="NDDDDDN"){
						$sql .= " AND p.length=''" ;
					}else{
						$sql .= " AND p.length='".$data['filter_length']."'" ;
					}
					
				}
			}
			
			if (!empty($data['filter_model'])) {
				if (strpos($data['filter_model'], ":")){ //is slider
					$values=explode(":", $data['filter_model']);
					$sql .= " AND p.model BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					
					if ($data['filter_model']=="NDDDDDN"){
						$sql .= " AND p.model=''" ;
					}else{
						$sql .= " AND p.model='".$data['filter_model']."'" ;
					}
				}
			}
			
			if (!empty($data['filter_sku'])) {
				if (strpos($data['filter_sku'], ":")){ //is slider
					$values=explode(":", $data['filter_sku']);
					$sql .= " AND p.sku BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					
					if ($data['filter_sku']=="NDDDDDN"){
						$sql .= " AND p.sku=''" ;
					}else{
						$sql .= " AND p.sku='".$data['filter_sku']."'" ;
					}
								
				}
			}
			
			if (!empty($data['filter_upc'])) {
				if (strpos($data['filter_upc'], ":")){ //is slider
					$values=explode(":", $data['filter_upc']);
					$sql .= " AND p.upc BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_upc']=="NDDDDDN"){
						$sql .= " AND p.upc=''" ;
					}else{
						$sql .= " AND p.upc='".$data['filter_upc']."'" ;
					}
				}
			}			
			
			if (!empty($data['filter_location'])) {
				if (strpos($data['filter_location'], ":")){ //is slider
					$values=explode(":", $data['filter_location']);
					$sql .= " AND p.location BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					
					if ($data['filter_location']=="NDDDDDN"){
						$sql .= " AND p.location=''" ;
					}else{
						$sql .= " AND p.location='".$data['filter_location']."'" ;
					}
				}
			}				
			
			if (!empty($data['filter_weight'])) {
				if (strpos($data['filter_weight'], ":")){ //is slider
					$values=explode(":", $data['filter_weight']);
					$sql .= " AND p.weight BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_weight']=="NDDDDDN"){
						$sql .= " AND p.weight=''" ;
					}else{
						$sql .= " AND p.weight='".$data['filter_weight']."'" ;
					}

				}
			}				
			if (!empty($data['filter_ean'])) {
				if (strpos($data['filter_ean'], ":")){ //is slider
					$values=explode(":", $data['filter_ean']);
					$sql .= " AND p.ean BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_ean']=="NDDDDDN"){
						$sql .= " AND p.ean=''" ;
					}else{
						$sql .= " AND p.ean='".$data['filter_ean']."'" ;
					}
					
				}
			}				
			if (!empty($data['filter_isbn'])) {
				if (strpos($data['filter_isbn'], ":")){ //is slider
					$values=explode(":", $data['filter_isbn']);
					$sql .= " AND p.isbn BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_isbn']=="NDDDDDN"){
						$sql .= " AND p.isbn=''" ;
					}else{
						$sql .= " AND p.isbn='".$data['filter_isbn']."'" ;
					}

				}
			}				
			
			if (!empty($data['filter_mpn'])) {
				if (strpos($data['filter_mpn'], ":")){ //is slider
					$values=explode(":", $data['filter_mpn']);
					$sql .= " AND p.mpn BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_mpn']=="NDDDDDN"){
						$sql .= " AND p.mpn=''" ;
					}else{
						$sql .= " AND p.mpn='".$data['filter_mpn']."'" ;
					}

				}
			}				
						
			if (!empty($data['filter_jan'])) {
				if (strpos($data['filter_jan'], ":")){ //is slider
					$values=explode(":", $data['filter_jan']);
					$sql .= " AND p.jan BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					
					if ($data['filter_jan']=="NDDDDDN"){
						$sql .= " AND p.jan=''" ;
					}else{
						$sql .= " AND p.jan='".$data['filter_jan']."'" ;
					}
				}
			}
			
			if(version_compare(VERSION,'1.5.4','<')) {
			
					if (!empty($data['filter_name']) || !empty($data['filter_tag'])) {
						$sql .= " AND (";
													
						if (!empty($data['filter_name'])) {
							$implode = array();
							
							$words = explode(' ', $data['filter_name']);
							
							foreach ($words as $word) {
								if (!empty($data['filter_description'])) {
									$implode[] = "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' OR LCASE(pd.description) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' OR  LCASE(p.model) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' ";
								} else {
									$implode[] = "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' OR  LCASE(p.model) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' ";
								}				
							}
							
							if ($implode) {
								$sql .= " " . implode(" OR ", $implode) . "";
							}
						}
						
						if (!empty($data['filter_name']) && !empty($data['filter_tag'])) {
							$sql .= " OR ";
						}
						
						if (!empty($data['filter_tag'])) {
							$implode = array();
							
							$words = explode(' ', $data['filter_tag']);
							
							foreach ($words as $word) {
								$implode[] = "LCASE(pt.tag) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_tag'])) . "%' AND pt.language_id = '" . (int)$this->config->get('config_language_id') . "'";
							}
							
							if ($implode) {
								$sql .= " " . implode(" OR ", $implode) . "";
							}
						}
					
						$sql .= ")";
					}
			
			
			}else{
			
					if (!empty($data['filter_name']) || !empty($data['filter_tag'])) {
						$sql .= " AND (";
						
						if (!empty($data['filter_name'])) {					
							if (!empty($data['filter_description'])) {
								$sql .= "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "%' OR MATCH(pd.description) AGAINST('" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "')";
							} else {
								$sql .= "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "%'";
							}
						}
						
						if (!empty($data['filter_name']) && !empty($data['filter_tag'])) {
							$sql .= " OR ";
						}
						
						if (!empty($data['filter_tag'])) {
							$sql .= "MATCH(pd.tag) AGAINST('" . $this->db->escape(utf8_strtolower($data['filter_tag'])) . "')";
						}
					
						$sql .= ")";
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.model) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.sku) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}	
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.upc) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}		
		
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.ean) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}
		
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.jan) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.isbn) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}		
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.mpn) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}					
					}
					
			
			}
			
			
			$sql .= " GROUP BY p.product_id";
			
			
			//echo $sql;
			
			(isset($data['filter_min_price']) && !empty($data['filter_min_price'])) ? $min_price=$data['filter_min_price'] : $min_price="no";
			!empty($data['filter_max_price'])? $max_price=$data['filter_max_price'] : $max_price="no";
			
			
	 		$product_data = array();
	 		//echo $sql; die; 
	 		$query = $this->db->query($sql);   

			
			foreach ($query->rows as $key=> $value) {
				
			
				if ($min_price=="no"){
					$product_data["p".$value['product_id']] = $value['product_id'];
					
				}else{
					
					!empty($value['special']) ? $special_price=$value['special'] : $special_price=$min_price;
					
					if (($value['price'] <= $max_price || $value['price'] >= $max_price ) && ($special_price >= $min_price )){
					
						 $product_data["p".$value['product_id']] = $value['product_id'];
						
					}
					
				}
			}
				
	
	return	$product_data;
	
	}
	
	
	public  function GetProductsFilteredSpecial($data = array(), $clearance_id,$days=7,$reviewtipo){
		
		if ($this->customer->isLogged()) {
			$customer_group_id = $this->customer->getCustomerGroupId();
		} else {
			$customer_group_id = $this->config->get('config_customer_group_id');
		}	
		
		$sql = "SELECT p.product_id,ps.price AS special, p.price AS price FROM " . DB_PREFIX . "product p 
			LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) 
			LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id)
			LEFT JOIN " . DB_PREFIX . "product_special ps ON (p.product_id = ps.product_id)"; 
									
			if (!empty($data['filter_category_id'])) {
				$sql .= " LEFT JOIN " . DB_PREFIX . "product_to_category p2c ON (p.product_id = p2c.product_id)";			
			}
			
			if(version_compare(VERSION,'1.5.4','<')) {
					if (!empty($data['filter_tag'])) {
						$sql .= " LEFT JOIN " . DB_PREFIX . "product_tag pt ON (p.product_id = pt.product_id)";			
					}	
			}
				
			//rating filter
			if (!empty($data['filter_rating'])) {
					$sql .= " LEFT JOIN " . DB_PREFIX . "review r ON (p.product_id = r.product_id)";			
				}
				
			$sql .= " WHERE ps.customer_group_id = '" . (int)$customer_group_id . "' 
			AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' 
			AND p.status = '1' AND p.date_available <= NOW() 
			AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'
			AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW()))"; 
			
				
	        if (!empty($data['filter_category_id']) and $data['filter_category_id']!=0) {
				$sql .= " AND p2c.category_id = '" . (int)$data['filter_category_id'] . "'";
			}
					
			if (!empty($data['filter_manufacturers_by_id'])) {
				$sql .= " AND p.manufacturer_id = '" . (int)$data['filter_manufacturers_by_id'] . "'";
			}
			
			if (!empty($data['filter_stock_id'])) {
				$sql .= " AND p.stock_status_id = '" . (int)$data['filter_stock_id'] . "'";
			}
          		   												
			
			if (isset($data['filter_min_price']) && !empty($data['filter_max_price'])) {
				
				$sql .= "AND (ps.price BETWEEN ".$data['filter_min_price']." AND ".$data['filter_max_price'].") ";
			
			}
			if (!empty($data['filter_stock'])) {
				
				$sql .= " AND p.quantity > 0";
			
			}
			
			if (!empty($data['filter_clearance'])) {
				
				$sql .= " AND  p.stock_status_id='".$clearance_id."'";
			
			}
			if (!empty($data['filter_arrivals'])) {
				
				$sql .= " AND p.date_added >DATE_SUB(CURDATE(), INTERVAL ".$days." DAY)";
			
			}
			
			if (!empty($data['filter_rating'])) {
				if($reviewtipo=="avg"){
					if (strpos($data['filter_rating'], ":")){ //is slider
					    $values=explode(":", $data['filter_rating']);
					    $sql .= " AND (AVG(r.rating) BETWEEN ".$values[0]." AND ".$values[1]." AND r.status='1') ";
			       	}else{
						$sql .= " AND (SELECT CONVERT(AVG(rating) ,signed) AS total FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id)='".$data['filter_rating']."'" ;
					}
				}else{
					$sql .= " AND r.rating='".$data['filter_rating']."'" ;
						
				}
				
			}
			
			
			if (!empty($data['filter_width'])) {
				if (strpos($data['filter_width'], ":")){ //is slider
			 		$values=explode(":", $data['filter_width']);
					$sql .= " AND p.width BETWEEN ".$values[0]." AND ".$values[1];
				}else{
							
					if ($data['filter_width']=="NDDDDDN"){
						$sql .= " AND p.width=''" ;
					}else{
						$sql .= " AND p.width='".$data['filter_width']."'" ;
					}
					
				}
			}
			
			if (!empty($data['filter_height'])) {
				if (strpos($data['filter_height'], ":")){ //is slider
					$values=explode(":", $data['filter_height']);
					$sql .= " AND p.height BETWEEN ".$values[0]." AND ".$values[1];
				}else{
					
					if ($data['filter_height']=="NDDDDDN"){
						$sql .= " AND p.height=''" ;
					}else{
						$sql .= " AND p.height='".$data['filter_height']."'" ;
					}
				}
			}
			if (!empty($data['filter_length'])) {
				if (strpos($data['filter_length'], ":")){ //is slider
					$values=explode(":", $data['filter_length']);
					$sql .= " AND p.length BETWEEN ".$values[0]." AND ".$values[1];
				}else{
					
					if ($data['filter_length']=="NDDDDDN"){
						$sql .= " AND p.length=''" ;
					}else{
						$sql .= " AND p.length='".$data['filter_length']."'" ;
					}
					
				}
			}
			
			if (!empty($data['filter_model'])) {
				if (strpos($data['filter_model'], ":")){ //is slider
					$values=explode(":", $data['filter_model']);
					$sql .= " AND p.model BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					
					if ($data['filter_model']=="NDDDDDN"){
						$sql .= " AND p.model=''" ;
					}else{
						$sql .= " AND p.model='".$data['filter_model']."'" ;
					}
				}
			}
			
			if (!empty($data['filter_sku'])) {
				if (strpos($data['filter_sku'], ":")){ //is slider
					$values=explode(":", $data['filter_sku']);
					$sql .= " AND p.sku BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					
					if ($data['filter_sku']=="NDDDDDN"){
						$sql .= " AND p.sku=''" ;
					}else{
						$sql .= " AND p.sku='".$data['filter_sku']."'" ;
					}
								
				}
			}
			
			if (!empty($data['filter_upc'])) {
				if (strpos($data['filter_upc'], ":")){ //is slider
					$values=explode(":", $data['filter_upc']);
					$sql .= " AND p.upc BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_upc']=="NDDDDDN"){
						$sql .= " AND p.upc=''" ;
					}else{
						$sql .= " AND p.upc='".$data['filter_upc']."'" ;
					}
				}
			}			
			
			if (!empty($data['filter_location'])) {
				if (strpos($data['filter_location'], ":")){ //is slider
					$values=explode(":", $data['filter_location']);
					$sql .= " AND p.location BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					
					if ($data['filter_location']=="NDDDDDN"){
						$sql .= " AND p.location=''" ;
					}else{
						$sql .= " AND p.location='".$data['filter_location']."'" ;
					}
				}
			}				
			
			if (!empty($data['filter_weight'])) {
				if (strpos($data['filter_weight'], ":")){ //is slider
					$values=explode(":", $data['filter_weight']);
					$sql .= " AND p.weight BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_weight']=="NDDDDDN"){
						$sql .= " AND p.weight=''" ;
					}else{
						$sql .= " AND p.weight='".$data['filter_weight']."'" ;
					}

				}
			}				
			if (!empty($data['filter_ean'])) {
				if (strpos($data['filter_ean'], ":")){ //is slider
					$values=explode(":", $data['filter_ean']);
					$sql .= " AND p.ean BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_ean']=="NDDDDDN"){
						$sql .= " AND p.ean=''" ;
					}else{
						$sql .= " AND p.ean='".$data['filter_ean']."'" ;
					}
					
				}
			}				
			if (!empty($data['filter_isbn'])) {
				if (strpos($data['filter_isbn'], ":")){ //is slider
					$values=explode(":", $data['filter_isbn']);
					$sql .= " AND p.isbn BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_isbn']=="NDDDDDN"){
						$sql .= " AND p.isbn=''" ;
					}else{
						$sql .= " AND p.isbn='".$data['filter_isbn']."'" ;
					}

				}
			}				
			
			if (!empty($data['filter_mpn'])) {
				if (strpos($data['filter_mpn'], ":")){ //is slider
					$values=explode(":", $data['filter_mpn']);
					$sql .= " AND p.mpn BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					if ($data['filter_mpn']=="NDDDDDN"){
						$sql .= " AND p.mpn=''" ;
					}else{
						$sql .= " AND p.mpn='".$data['filter_mpn']."'" ;
					}

				}
			}				
						
			if (!empty($data['filter_jan'])) {
				if (strpos($data['filter_jan'], ":")){ //is slider
					$values=explode(":", $data['filter_jan']);
					$sql .= " AND p.jan BETWEEN ".$values[0]." AND ".$values[1];
			
				}else{
					
					if ($data['filter_jan']=="NDDDDDN"){
						$sql .= " AND p.jan=''" ;
					}else{
						$sql .= " AND p.jan='".$data['filter_jan']."'" ;
					}
				}
			}
			
			if(version_compare(VERSION,'1.5.4','<')) {
			
					if (!empty($data['filter_name']) || !empty($data['filter_tag'])) {
						$sql .= " AND (";
													
						if (!empty($data['filter_name'])) {
							$implode = array();
							
							$words = explode(' ', $data['filter_name']);
							
							foreach ($words as $word) {
								if (!empty($data['filter_description'])) {
									$implode[] = "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' OR LCASE(pd.description) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' OR  LCASE(p.model) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' ";
								} else {
									$implode[] = "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' OR  LCASE(p.model) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' ";
								}				
							}
							
							if ($implode) {
								$sql .= " " . implode(" OR ", $implode) . "";
							}
						}
						
						if (!empty($data['filter_name']) && !empty($data['filter_tag'])) {
							$sql .= " OR ";
						}
						
						if (!empty($data['filter_tag'])) {
							$implode = array();
							
							$words = explode(' ', $data['filter_tag']);
							
							foreach ($words as $word) {
								$implode[] = "LCASE(pt.tag) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_tag'])) . "%' AND pt.language_id = '" . (int)$this->config->get('config_language_id') . "'";
							}
							
							if ($implode) {
								$sql .= " " . implode(" OR ", $implode) . "";
							}
						}
					
						$sql .= ")";
					}
			
			
			}else{
			
					if (!empty($data['filter_name']) || !empty($data['filter_tag'])) {
						$sql .= " AND (";
						
						if (!empty($data['filter_name'])) {					
							if (!empty($data['filter_description'])) {
								$sql .= "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "%' OR MATCH(pd.description) AGAINST('" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "')";
							} else {
								$sql .= "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "%'";
							}
						}
						
						if (!empty($data['filter_name']) && !empty($data['filter_tag'])) {
							$sql .= " OR ";
						}
						
						if (!empty($data['filter_tag'])) {
							$sql .= "MATCH(pd.tag) AGAINST('" . $this->db->escape(utf8_strtolower($data['filter_tag'])) . "')";
						}
					
						$sql .= ")";
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.model) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.sku) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}	
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.upc) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}		
		
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.ean) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}
		
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.jan) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.isbn) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}		
						
						if (!empty($data['filter_name'])) {
							$sql .= " OR LCASE(p.mpn) = '" . $this->db->escape(utf8_strtolower($data['filter_name'])) . "'";
						}					
					}
					
			
			}
			
			
			$sql .= " GROUP BY p.product_id";
    		
			
			(isset($data['filter_min_price']) && !empty($data['filter_min_price'])) ? $min_price=$data['filter_min_price'] : $min_price="no";
			!empty($data['filter_max_price'])? $max_price=$data['filter_max_price'] : $max_price="no";
			
			
	 		$product_data = array();
	 		$query = $this->db->query($sql);
			foreach ($query->rows as $key=> $value) {
				
			
				if ($min_price=="no"){
					 $product_data["p".$value['product_id']] = $value['product_id'];
					
				}else{
					if ($value['special'] <= $min_price || $value['special'] >= $min_price ){
						$product_data["p".$value['product_id']] = $value['product_id'];
					}
					
				}
			}
			
			
			
	return	$product_data;
	
	}
	/*
	public function CleanName($str){
      return html_entity_decode($str);
    }*/
	
	
	public function CleanName($str){
	
	$str_to_clean=$str;
	$search  = array('%25','%2B','%26quot%3B','&quot;','%26amp%3B');
	$replace = array('%','+','"','"',"&");
		return str_replace($search, $replace,$str_to_clean);
	}
	
	public function SeoFix($str){
	
		$str_seo_fix=$str;
	
		$search  = array("%20","%23","%24","%25","%26","%40","%60","%2F","%3A","%3B","%3C","%3D","%3E","%3F","%5B","%5C","%5D","%5E","%7B","%7C","%7D","%7E","%22","%27","%2B","%2C");
		$replace = array("%2520","%2523","%2524","%2525","%2526","%2540","%2560","%252F","%253A","%253B","%253C","%253D","%253E","%253F","%255B","%255C","%255D","%255E","%257B","%257C","%257D","%257E","%2522","%2527","%252B","%252C");

		if ($this->config->get('config_seo_url')){
			return str_replace($search, $replace,$str_seo_fix);
		}else{
			return $str_seo_fix;
		}
	
	}
	
	public function formatMoney($number) {
	    return ($number*$this->currency->getValue());
  	}
	public function UnformatMoney($number,$currency='') {
	    return ($number/$this->currency->getValue($currency));
  	}
	
	
	
    public function formatCurrency($value = '', $format = true) {
		$decimal_place = $this->currency->getDecimalPlace();
		
		if ($format) {
			$decimal_point = $this->language->get('decimal_point');
		} else {
			$decimal_point = '.';
		}
		
		if ($format) {
			$thousand_point = $this->language->get('thousand_point');
		} else {
			$thousand_point = '';
		}
		
    	$string = number_format(round($value, (int)$decimal_place), (int)$decimal_place, $decimal_point, $thousand_point);

    	return $string;
  	}
	
     public function getRanges($intMin,$intMax,$intRanges=5,$prices=array(),$productos = array(),$currency,$is_tax,$tax_id,$cat_id,$what='') {
    	
	$intRange =$price_diff=$intMax-$intMin;
	$intIncrement = ceil(abs($intRange/$intRanges));
	$intRanges;
	
	$arrRanges = array(); $arrPrices=array();
	
	/*if ($intIncrement < 10){ //the minimun between min and max must be 10
		
		$arrRanges[]=$intMax;
		   
		   $f_min_price=$this->UnformatMoney($intMin,$currency);
		   $f_max_price=$this->UnformatMoney($intMax,$currency);
		   
		    if ( $this->config->get('config_tax')&& $is_tax) {
				    $tax_value= $this->tax->calculate(1, $tax_id, $this->config->get('config_tax'));
					$f_min_price=floor( $f_min_price/$tax_value ); 
					$f_max_price=ceil( $f_max_price/$tax_value );
			}
		
		$arrayPrices[]=array(
				'prices'	=> "%s".$intMin."%s",
				'intMax' 	=> $intMax,
				'intMin' 	=> $intMin,
				'total' 	=> (int)$this->getTotalPrices($f_min_price,$f_max_price,$productos),
			);
		
		
	}else{ */
	
		for($i=0;$i<$intRanges;$i++) {
			$arrRanges[] = $i==0 || $i==($intRanges-1)?$i==0?$intMin:$intMax:$intMin+($i*$intIncrement);
		}
	    $j=0;
        foreach($arrRanges as $key=>$value) { 
		
		if ($j == count($arrRanges)-1){
             break;
        }else{
           
		   $intMin = $key == 0?$value:$arrRanges[($key)];
		   $intMax = $arrRanges[($key+1)];
           $f_min_price=$this->UnformatMoney($intMin,$currency);
		   $f_max_price=$this->UnformatMoney($intMax,$currency);
		      if ( $this->config->get('config_tax')&& $is_tax) {
				    $tax_value= $this->tax->calculate(1, $tax_id, $this->config->get('config_tax'));
					$f_min_price=($j>0)?ceil( $f_min_price/$tax_value )+0.1:floor( $f_min_price/$tax_value );
				    $f_max_price= ceil($f_max_price/$tax_value) ;
			  }else{
				  $f_min_price= ($j>0) ? $f_min_price+0.1:$f_min_price; 
				  $f_max_price= $f_max_price;
			  }
			   
		  	$arrayPrices[]=array(
				'prices'	=> "%s ".$this->formatCurrency($intMin)." %s - %s ".$this->formatCurrency($intMax)." %s",
				'intMax' 	=> $intMax,
				'intMin' 	=> $intMin,
				'total' 	=> (int)$this->getTotalPrices($f_min_price,$f_max_price,$productos,$cat_id,$what),
			);

		  $j++;
		}
	//	}'prices'	=> "%s ".$intMin." %s - %s ".$intMax." %s",

	
	}

    return $arrayPrices;

}

	
public function getRangesCustom($intMin,$intMax,$intRanges=5,$prices=array(),$productos = array(),$currency,$is_tax,$tax_id,$cat_id,$what='', $label = '', $labelSymbol = '', $SymbolLeft = '') {


	$intRange =$price_diff=$intMax-$intMin;
	$intIncrement = ceil(abs($intRange/$intRanges));
	$intRanges;

	$arrRanges = array(); $arrPrices=array();

	for($i=0;$i<$intRanges;$i++) {
		$arrRanges[] = $i==0 || $i==($intRanges-1)?$i==0?$intMin:$intMax:$intMin+($i*$intIncrement);
	}
	$j=0;$k=1;
	foreach($arrRanges as $key=>$value) { 
		

	if ($j == count($arrRanges)-1){
	     break;
	}else{ 

	   
	   $intMin = $key == 0?$value:$arrRanges[($key)];
	   $intMax = $arrRanges[($key+1)];
	   if($intMin>0){
	   $intMin=$intMin+1;}
	   $f_min_price=$this->UnformatMoney($intMin,$currency);
	   $f_max_price=$this->UnformatMoney($intMax,$currency);
      if ( $this->config->get('config_tax')&& $is_tax) {
		    $tax_value= $this->tax->calculate(1, $tax_id, $this->config->get('config_tax'));
			$f_min_price=($j>0)?ceil( $f_min_price/$tax_value )+0.1:floor( $f_min_price/$tax_value );
		    $f_max_price= ceil($f_max_price/$tax_value) ;
	  }else{
		  $f_min_price= ($j>0) ? $f_min_price+0.1:$f_min_price; 
		  $f_max_price= $f_max_price;
	  }

	  
	  	//echo $labelSymbol; die;

	  	if($labelSymbol=="<"){$label=$label+1;}
	  	else if($labelSymbol==">"){$label=$label-1;}
	 
	

	   if($label != "")
	   {
	   		//$priceLabel = $labelSymbol .$SymbolLeft .$this->formatCurrency($label);

	   		$priceLabel = "%s ".$labelSymbol .$this->formatCurrency($label)." %s";
	   }
	   else
	   {
	   		$priceLabel = "%s ".$this->formatCurrency($intMin)." %s - %s ".$this->formatCurrency($intMax)." %s";
	   }


	  	$arrayPrices[]=array(
			'prices'	=> $priceLabel,
			'intMax' 	=> $intMax,
			'intMin' 	=> $intMin,
			'total' 	=> (int)$this->getTotalPrices($f_min_price,$f_max_price,$productos,$cat_id,$what),
			'label' => $label,
			'label-symbol' => $labelSymbol,
			'symbol-left' => $SymbolLeft
		);

	  $j++;$k++;
	}
	//print_r('<pre>'); print_r($arrayPrices); die;
	//	}'prices'	=> "%s ".$intMin." %s - %s ".$intMax." %s",


	}
	//print_r('<pre>'); print_r($arrayPrices); die;
	return $arrayPrices;

	}
	public function getTotalPrices($intMin,$intMax,$productos,$cat_id,$what=''){
	if ($this->customer->isLogged()) {
			$customer_group_id = $this->customer->getCustomerGroupId();
		} else {
			$customer_group_id = $this->config->get('config_customer_group_id');
		}	
			$cache = md5($intMin.$intMax.http_build_query($productos).$cat_id.$what);
	    	$string=http_build_query($productos);
			
			$products_count =  $this->getCacheSMBD(
			'price_ranges_store_'.$what.'_('. 
			(int)$this->config->get('config_store_id') .').'. 
			(int)$cat_id . '.' . 
			(int)$cat_id . '.' . 
			(int)$this->config->get('config_language_id') . '.' .  
			(int)$customer_group_id  . '.' . 
			$cache,
			(int)$cat_id,
			(int)$cat_id,
			$what);
		
			if (!$products_count){
			
			$products_count=array();
	
			$sql= "SELECT ps.product_id FROM  " . DB_PREFIX . "product_special ps 
			LEFT JOIN " . DB_PREFIX . "product p ON (p.product_id = ps.product_id)
			LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id)
			AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'
			AND p.status = '1' AND p.date_available <= NOW() 
			WHERE
			ps.customer_group_id = '" . (int)$customer_group_id . "'
			AND
			ps.product_id IN (".implode(', ',array_values($productos)).") 
			AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW()))		
			AND ps.price BETWEEN ".$intMin." AND ".$intMax." ";
			
			$query = $this->db->query($sql);

			foreach ($query->rows as $key=> $value){
				$products_count[$value['product_id'].'id']=$value['product_id'];
			}
	
			$sql = "SELECT p.product_id,(SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$customer_group_id . "' AND
			ps.product_id IN (".implode(', ',array_values($productos)).") AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special, p.price AS price FROM " . DB_PREFIX . "product p 
				LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) 
				LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id)
				LEFT JOIN " . DB_PREFIX . "product_special ps ON (p.product_id = ps.product_id)									
				 
			WHERE pd.language_id = '" . (int)$this->config->get('config_language_id') . "' 
			AND p.status = '1' 
			AND p.date_available <= NOW() 
			AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'
			AND
			p.product_id IN (".implode(', ',array_values($productos)).") 
			AND p.price BETWEEN ".$intMin." AND ".$intMax."";
			
			$query = $this->db->query($sql);
			
			foreach ($query->rows as $key=> $value){
			
				if(isset($value['special'])){
					
					if ($value['special'] >= $intMin){
						$products_count[$value['product_id'].'id']=$value['product_id'];
					}
					
					
				}else{
				$products_count[$value['product_id'].'id']=$value['product_id'];
				}
			}
			
			$this->setCacheSMBD(
			'price_ranges_store_'.$what.'_('. 
			(int)$this->config->get('config_store_id') .').'. 
			(int)$cat_id . '.' . 
			(int)$cat_id . '.' . 
			(int)$this->config->get('config_language_id') . '.' .  
			(int)$customer_group_id  . '.' .  
			$cache,
			$products_count,
			(int)$cat_id,
			(int)$cat_id,
			$what,
			$string);
				
	        }
			
			
		return count($products_count);
		
	}
	
	
	
	
	public function getProductsPriceandSpecial($products = array(), $data= array(),$what=''){
	
		if ($this->customer->isLogged()) {
			$customer_group_id = $this->customer->getCustomerGroupId();
		} else {
			$customer_group_id = $this->config->get('config_customer_group_id');
		}	
		
	    $cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
		$prices_data =  $this->getCacheSMBD(
		'Prices_filtered_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .')_customer('.
		(int)$customer_group_id.').'.
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id')  . '.' . 
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);

				
		if (!$prices_data) {
			
			$prices= array();
			$special_prices= array();
			
			$sql= "SELECT p.price, p.product_id FROM  " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) 
			WHERE p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' AND p.product_id IN (".implode(', ',array_values($products)).") ORDER BY p.price DESC";
			$query = $this->db->query($sql);
			
			foreach ($query->rows as $key=> $value){
				$prices[$value['product_id'].'id']=$value['price'];
			}
						
			$sql= "SELECT ps.price, ps.product_id FROM  " . DB_PREFIX . "product_special ps LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (ps.product_id = p2s.product_id) WHERE  ps.customer_group_id = '" . (int)$customer_group_id . "' AND ps.product_id IN (".implode(', ',array_values($products)).") AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW()))		
			ORDER BY ps.price DESC";
			//echo $sql; die;
			$query = $this->db->query($sql);
			
			
			if ($query->rows){
				foreach ($query->rows as $key=> $value){
					$special_prices[$value['product_id'].'id']=$value['price'];
				}
			}
			
			
			$new_array=array_merge($prices,$special_prices);
			$prices_data=array();
			$prices_data = array(
				'PriceMax' => max($new_array),
				'PriceMin'	=> min($new_array)
			);
			
				
				
		 $this->setCacheSMBD(
		'Prices_filtered_by_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .')_customer('.
		(int)$customer_group_id.').'.
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' .  
		$cache,
		$prices_data,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what,
		$string);	

	}
	
			return $prices_data;
	}
	
		
	public function calculateTAX($price,$taxclass_id){
    	$tax_rates= $this->tax->getRates(100,$taxclass_id);
		$amount=0;
		foreach ($tax_rates as $tax_rate) {
			if ($tax_rate['type'] == 'F') {
				$amount += $tax_rate['amount'];
			//$price=$price-$tax_rate['amount'];echo "<br>";
			} elseif ($tax_rate['type'] == 'P') {
		
				$amount += ($price / 100 * $tax_rate['amount']);
		
			}
			
		}
	return	$price-$amount;
		
	}
    
	
	public function getStocksSpecial($products = array(), $data= array(),$what=''){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		if ($this->customer->isLogged()) {
				$customer_group_id = $this->customer->getCustomerGroupId();
			} else {
				$customer_group_id = $this->config->get('config_customer_group_id');
			}	
		
		$special_data = $this->getCacheSMBD(
		'specialprice_filters_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		(int)$this->config->get('customer_group_id') . '.' . 
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
		
		if (!$special_data) {	
				
			
			$special_data = array();
			
			$sql = "SELECT COUNT(DISTINCT ps.product_id) AS total FROM " . DB_PREFIX . "product_special ps 
			LEFT JOIN " . DB_PREFIX . "product p ON (ps.product_id = p.product_id) 
			LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) 
			WHERE
			p.product_id IN (".implode(', ',array_values($products)).") AND
			p.status = '1' AND 
			p.date_available <= NOW() AND 
			p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' AND 
			ps.customer_group_id = '" . (int)$customer_group_id . "' 
			AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW()))";
				
			$query = $this->db->query($sql);
			
			
			if (isset($query->row['total'])) {
				$special_data= $query->row['total'];
			} else {
				$special_data= "no_special";	
			}
	
			$this->setCacheSMBD(
			'specialprice_filters_store_'.$what.'_('. 
			(int)$this->config->get('config_store_id') .').'. 
			(int)$data['filter_category_id'] . '.'  .
			(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
			(int)$this->config->get('config_language_id') . '.' . 
			(int)$this->config->get('customer_group_id') . '.' . 
			$cache, 
			$special_data,
			(int)$data['filter_category_id'],
			(int)substr($data['filter_manufacturers_by_id'], 0, -1),
			$what,
			$string);
		
		
		}
		
		
		return $special_data;
	
	}
	
	
	public function getStocksClearance($products = array(), $data= array(), $clearance_id,$what=''){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
				
		$clearance_data = $this->getCacheSMBD(
		'clearance_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
		
		if (!$clearance_data) {	
		
		$clearance_data = array();
		
		$sql = "SELECT COUNT(DISTINCT p.product_id) AS total FROM " . DB_PREFIX . "product p 
			WHERE
			p.product_id IN (".implode(', ',array_values($products)).")
			AND p.stock_status_id='".$clearance_id."'";
				
			$query =  $this->db->query($sql);
			if (isset($query->row['total'])) {
				$clearance_data= $query->row['total'];
			} else {
				$clearance_data= "no_clearance";	
			}
			
	
		$this->setCacheSMBD(
			'stocks_by_products_store_'.$what.'_('. 
			(int)$this->config->get('config_store_id') .').'. 
			(int)$data['filter_category_id'] . '.'  .
			(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
			(int)$this->config->get('config_language_id') . '.' . 
			$cache, 
			$clearance_data,
			(int)$data['filter_category_id'],
			(int)substr($data['filter_manufacturers_by_id'], 0, -1),
			$what,
			$string);
		
		} 	
						
			return $clearance_data;
	

	}
	
	
	public function getStocksInStock($products = array(), $data= array(),$what=''){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
		$stockstatus_data = $this->getCacheSMBD(
		'instock_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' .  
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
		if (!$stockstatus_data) {	
		
		
		$sql = "SELECT COUNT(DISTINCT p.product_id) AS total FROM " . DB_PREFIX . "product p 
			WHERE
			p.product_id IN (".implode(', ',array_values($products)).")
			AND p.quantity >0";
		
		 $query =  $this->db->query($sql);
			if (isset($query->row['total'])) {
				$stockstatus_data= $query->row['total'];
			} else {
				$stockstatus_data= "no_stock";	
			}
			
			
			
		$this->setCacheSMBD(
			'instock_products_store_'.$what.'_('. 
			(int)$this->config->get('config_store_id') .').'. 
			(int)$data['filter_category_id'] . '.'  .
			(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
			(int)$this->config->get('config_language_id') . '.' . 
			$cache, 
			$stockstatus_data,
			(int)$data['filter_category_id'],
			(int)substr($data['filter_manufacturers_by_id'], 0, -1),
			$what,
			$string);
		
		
		} 	
						
			return $stockstatus_data;
	

	}
	
	
	
	
	public function getStocksArrivals($products = array(), $data= array(),$days=7,$what=''){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data); 
		
		$new_arribals_data = $this->getCacheSMBD(
		'new_products_store_'.$what.'_('. 
		(int)$this->config->get('config_store_id') .').'. 
		(int)$data['filter_category_id'] . '.' . 
		(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
		(int)$this->config->get('config_language_id') . '.' . 
		$cache,
		(int)$data['filter_category_id'],
		(int)substr($data['filter_manufacturers_by_id'], 0, -1),
		$what);
		
				
		if (!$new_arribals_data) {	
		
		$new_arribals_data=array();
		
		$sql = "SELECT COUNT(DISTINCT p.product_id) AS total FROM " . DB_PREFIX . "product p 
			WHERE
			p.product_id IN (".implode(', ',array_values($products)).")
			AND p.date_added >DATE_SUB(CURDATE(), INTERVAL ".$days." DAY)";
		
		 $query =  $this->db->query($sql);
			if (isset($query->row['total'])) {
				$new_arribals_data= $query->row['total'];
			} else {
				$new_arribals_data= "no_new";	
			}
				
				
		$this->setCacheSMBD(
			'new_products_store_'.$what.'_('. 
			(int)$this->config->get('config_store_id') .').'. 
			(int)$data['filter_category_id'] . '.'  .
			(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . 
			(int)$this->config->get('config_language_id') . '.' . 
			$cache, 
			$new_arribals_data,
			(int)$data['filter_category_id'],
			(int)substr($data['filter_manufacturers_by_id'], 0, -1),
			$what,
			$string);
				
		} 	
						
		return $new_arribals_data;
	}


	public function OrderArray($values,$order){
		
		$sort_order=array();
		
		
		if (empty($values)){
			
			return $values;	
			
		}else{
			if ($order=="OCASC"){
				 foreach ($values as $key => $value) {
					 $sort_order[] = $value['order'];
				 }
				 array_multisort($sort_order,SORT_ASC,$values);   
				 return $values;
			//order opencart default reverse
			}elseif ($order=="OCDESC"){
				 foreach ($values as $key => $value) {
               		 $sort_order[] = $value['order'];
               	 }
                 array_multisort($sort_order,SORT_DESC,$values);  
				 return $values;   
			//order total asc
			}elseif ($order=="OTASC"){
				 foreach ($values as $key => $value) {
            		 $sort_order[] = $value['total'];
            	 }
                 array_multisort($sort_order,SORT_ASC,$values);  
				 return $values;   
		    //order total desc
			}elseif ($order=="OTDESC"){
				foreach ($values as $key => $value) {
                	 $sort_order[] = $value['total'];
               	}
                array_multisort($sort_order,SORT_DESC,$values);  
				 return $values;   
			//order computer order asc
			}elseif ($order=="OCOASC"){
				 foreach ($values as $key => $value) {
            		 $sort_order[] = $value['name'];
            	 }
                 array_multisort($sort_order,SORT_ASC,$values);  
				 return $values;   
		    //order computer order desc
			}elseif ($order=="OCODESC"){
				foreach ($values as $key => $value) {
                	 $sort_order[] = $value['name'];
               	}
                array_multisort($sort_order,SORT_DESC,$values);  
			    return $values;   
			//order human order desc
			}elseif ($order=="OHDESC"){
				foreach ($values as $key => $value) {
					$sort_order["str".$value['name']] = $value['name'];
				}
			    natsort($sort_order);
				$values= array_reverse(array_merge($sort_order,$values));  
				return $values;
			//order human order asc	   
			}elseif ($order=="OHASC"){	
				foreach ($values as $key => $value) {
					$sort_order["str".$value['name']] = $value['name'];
				}
			    natsort($sort_order);
				$values= array_merge($sort_order,$values);   
				return $values; 
			}
		}
	}
	
	
	
	public function CacheMenu($output_html, $data= array(),$what,$filter_coin){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
				
		$html_data = $this->getCacheSMBD('Main_menu_'.$what.'.'.$filter_coin.'_('.(int)$this->config->get('config_store_id') .').'.(int)$data['filter_category_id'] . '.' .(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' .(int)$this->config->get('config_language_id'). '.' .$cache,(int)$data['filter_category_id'],(int)substr($data['filter_manufacturers_by_id'], 0, -1),$what,"cache_supercategory_menu");
			
		if (!$html_data) {	
				
		$this->setCacheSMBD('Main_menu_'.$what.'.'.$filter_coin.'_('.(int)$this->config->get('config_store_id') .').'.(int)$data['filter_category_id'] . '.'  .			(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' .(int)$this->config->get('config_language_id') . '.' .$cache,$output_html,(int)$data['filter_category_id'],(int)substr($data['filter_manufacturers_by_id'], 0, -1),$what,$string,"cache_supercategory_menu");
		
		} 	

		return $html_data;
	
	}

	public function isCachedMenu($data= array(),$what,$filter_coin){
		
		$cache = md5(http_build_query($data));
	    $string=http_build_query($data);
		
		$html_data = $this->getCacheSMBD('Main_menu_'.$what.'.'.$filter_coin.'_('.(int)$this->config->get('config_store_id') .').'. (int)$data['filter_category_id'] . '.' .(int)substr($data['filter_manufacturers_by_id'], 0, -1) . '.' . (int)$this->config->get('config_language_id'). '.' . $cache,(int)$data['filter_category_id'],(int)substr($data['filter_manufacturers_by_id'], 0, -1),$what,"cache_supercategory_menu");
		
    	if (!$html_data) {	
		   return false;
	    }else{	
	       return $html_data;
		}
	}

	
	
	public function getPriceSliderHtml($idtxt,$scale,$min,$max,$symbol_left, $symbol_right,$name,$is_ajax,$ajax_url,$url,$currency=0){
		
		$out_put_html='';
		
		$out_put_html.="<div class=\"slider\">";
		
		if (($min==$max) || ($max-$min<=1)){ 
		$out_put_html.="&nbsp;<span style=\"display: inline-block; width: 150px; padding-right:10px;\">".$symbol_left."&nbsp;". round($max,2) ."&nbsp;".$symbol_right."</span>";
  		}else{
			
		$out_put_html.="<input id=\"".$idtxt."\" type=\"slider\" name=\"".$name."\" value=\"".$min.";".$max."\" /></span>";
		$out_put_html.="<script type=\"text/javascript\">";
		$out_put_html.="$(function() {";
		$out_put_html.="jQuery(\"#".$idtxt."\").slider({";
		$out_put_html.="	from: ".$min.",";
  		$out_put_html.="	to: ".$max.",";
    	$out_put_html.="	step: 1,";
  		$out_put_html.="	scale: ".$scale.",";
  		$out_put_html.="	limits: false,";
		$out_put_html.="	round: 2,";
 		$out_put_html.="	format: { format: '".$symbol_left."##".$symbol_right."' },";
		$out_put_html.="	callback: function( value ){";
		//$out_put_html.="	// console.dir( this );";
		$out_put_html.="	var nvalues=value.split(\";\");";
		//$out_put_html.="	";
		//$out_put_html.="	//clearTimeout(timers);";
					
	   //	if ($is_ajax){  
			$out_put_html.="url='".htmlspecialchars_decode($ajax_url)."&C=".$currency."&".$name."='+nvalues[ 0 ]+';'+nvalues[ 1 ];";
	   //	}else{
			$out_put_html.="url2='".htmlspecialchars_decode($url)."&C=".$currency."&".$name."='+nvalues[ 0 ]+';'+nvalues[ 1 ];";
       //	}

		$out_put_html.="delayShowData(url,".$is_ajax.",url2);";
		$out_put_html.="	}";
		$out_put_html.="});";
		$out_put_html.="});";

		$out_put_html.="</script>";
		

		
		}
		$out_put_html.="</div>";  
		
		return $out_put_html;
		
		
		
	}
					
		public function getPriceSliderHtmlSelected($idtxt,$scale,$min,$max,$symbol_left, $symbol_right,$name,$is_ajax,$ajax_url,$url,$currency=0,$ajax_url_del,$url_del){
		
		$out_put_html='';
		
		$out_put_html.="<div class=\"slider\">";
		$out_put_html.="<a class=\"link_filter_del smenu {dnd:'".$url_del."',ajaxurl:'".$ajax_url_del."', gapush:'no'}\" href=\"javascript:void(0)\" rel=\"nofollow\"> <img src=\"image/supermenu/spacer.gif\" alt=\"remove filter\" class=\"filter_del\" /></a><br>";
		if (($min==$max) || ($max-$min<=1)){ 
		$out_put_html.="&nbsp;<span style=\"display: inline-block; width: 150px; padding-right:10px;\">".$symbol_left."&nbsp;". round($max,2) ."&nbsp;".$symbol_right."</span>";
  		}else{
			
		$out_put_html.="<input id=\"".$idtxt."\" type=\"slider\" name=\"".$name."\" value=\"".$min.";".$max."\" /></span>";
		$out_put_html.="<script type=\"text/javascript\">";
		$out_put_html.="$(function() {";
		$out_put_html.="jQuery(\"#".$idtxt."\").slider({";
		$out_put_html.="	from: ".$min.",";
  		$out_put_html.="	to: ".$max.",";
    	$out_put_html.="	step: 1,";
  		$out_put_html.="	scale: ".$scale.",";
  		$out_put_html.="	limits: false,";
		$out_put_html.="	round: 2,";
 		$out_put_html.="	format: { format: '".$symbol_left."##".$symbol_right."' },";
		$out_put_html.="	callback: function( value ){";
		//$out_put_html.="	// console.dir( this );";
		$out_put_html.="	var nvalues=value.split(\";\");";
		//$out_put_html.="	";
		//$out_put_html.="	//clearTimeout(timers);";
					
	   	 //	if ($is_ajax){  
			$out_put_html.="url='".htmlspecialchars_decode($ajax_url)."&C=".$currency."&".$name."='+nvalues[ 0 ]+';'+nvalues[ 1 ];";
	   //	}else{
			$out_put_html.="url2='".htmlspecialchars_decode($url)."&C=".$currency."&".$name."='+nvalues[ 0 ]+';'+nvalues[ 1 ];";
       //	}

		$out_put_html.="delayShowData(url,".$is_ajax.",url2);";
		$out_put_html.="	}";
		$out_put_html.="});";
		$out_put_html.="});";

		$out_put_html.="</script>";
		

		
		}
		$out_put_html.="</div>";  
		
		return $out_put_html;
		
		
		
	}				
						
	public function CleanSliderName($str){
		$search  = array(' ','(',')','.','/');
		$replace = array("","","","","");

		return str_replace($search, $replace,$str);
		
	}					
						
	public function getSliderHtml($idtxt,$scale,$min,$max,$dimension,$name,$is_ajax,$ajax_url,$url){
		
		$out_put_html='';
		
		$out_put_html.="<div class=\"slider\">";	
		
		
		$out_put_html.="<input id=\"".$this->CleanSliderName($idtxt)."\" type=\"slider\" name=\"".$name."\" value=\"".$min.";".$max."\" /></span>";
		$out_put_html.="<script type=\"text/javascript\">";
		$out_put_html.="$(function() {";
		$out_put_html.="jQuery(\"#".$this->CleanSliderName($idtxt)."\").slider({";
		$out_put_html.="	from: ".$min.",";
  		$out_put_html.="	to: ". $max.",";
    	$out_put_html.="	step: 1,";
  		$out_put_html.="	scale: ".$scale.",";
  		$out_put_html.="	limits: false,";
		$out_put_html.="	round: 2,";
 		$out_put_html.="	dimension: '".$dimension."',";
		$out_put_html.="	format: { format: '##.00' },";
		$out_put_html.="	callback: function( value ){";
		//$out_put_html.="	// console.dir( this );";
		$out_put_html.="	var nvalues=value.split(\";\");";
					
		   //if ($is_ajax){ 		
				$out_put_html.="url='".htmlspecialchars_decode($ajax_url)."='+nvalues[ 0 ]+':'+nvalues[ 1 ];";
		  // }else{
				$out_put_html.="url2='". htmlspecialchars_decode($url)."='+nvalues[ 0 ]+':'+nvalues[ 1 ];";
		  // }
		
		
		$out_put_html.="delayShowData(url,".$is_ajax.",url2);";
		$out_put_html.="	}";
		$out_put_html.="});";
		$out_put_html.="});";
		$out_put_html.="</script>";
    	$out_put_html.="</div>";
		return $out_put_html;
	}
	
	
	
	public function getSliderHtmlSelected($idtxt,$scale,$min,$max,$dimension,$name,$is_ajax,$ajax_url_del,$url_del,$ajax_url_slider,$filter_url_slider){
				
		$out_put_html='';
		
		$out_put_html.="<div class=\"slider\">";	
		$out_put_html.="<a class=\"link_filter_del smenu {dnd:'".$url_del."',ajaxurl:'".$ajax_url_del."', gapush:'no'}\" href=\"javascript:void(0)\" rel=\"nofollow\"> <img src=\"image/supermenu/spacer.gif\" alt=\"remove filter\" class=\"filter_del\" /></a><br>";
		$out_put_html.="<input id=\"".$this->CleanSliderName($idtxt)."\" type=\"slider\" name=\"".$name."\" value=\"".$min.";".$max."\" /></span>";
		$out_put_html.="<script type=\"text/javascript\">";
		$out_put_html.="$(function() {";
		$out_put_html.="jQuery(\"#".$this->CleanSliderName($idtxt)."\").slider({";
		$out_put_html.="	from: ".$min.",";
  		$out_put_html.="	to: ". $max.",";
    	$out_put_html.="	step: 1,";
  		$out_put_html.="	scale: ".$scale.",";
  		$out_put_html.="	limits: false,";
		$out_put_html.="	round: 2,";
 		$out_put_html.="	dimension: '".$dimension."',";
		$out_put_html.="	format: { format: '##.00' },";
		$out_put_html.="	callback: function( value ){";
		//$out_put_html.="	// console.dir( this );";
		$out_put_html.="	var nvalues=value.split(\";\");";
					
		  // if ($is_ajax){ 		
				$out_put_html.="url='".htmlspecialchars_decode($ajax_url_slider)."='+nvalues[ 0 ]+':'+nvalues[ 1 ];";
		  // }else{
				$out_put_html.="url2='". htmlspecialchars_decode($filter_url_slider)."='+nvalues[ 0 ]+':'+nvalues[ 1 ];";
		  // }
		
		
		$out_put_html.="delayShowData(url,".$is_ajax.",url2);";
		$out_put_html.="	}";
		$out_put_html.="});";
		$out_put_html.="});";
		$out_put_html.="</script>";
    	$out_put_html.="</div>";
		return $out_put_html;
	}
	
	
	public function getSliderHtmlSelectedwithUnits($idtxt,$scale,$min,$max,$dimension,$name,$is_ajax,$ajax_url_del,$url_del,$ajax_url_slider,$filter_url_slider){
		
		
		$out_put_html='';
		
		$out_put_html.="<div class=\"slider\">";	
		$out_put_html.="<a class=\"link_filter_del smenu {dnd:'".$url_del."',ajaxurl:'".$ajax_url_del."', gapush:'no'}\" href=\"javascript:void(0)\" rel=\"nofollow\"> <img src=\"image/supermenu/spacer.gif\" alt=\"remove filter\" class=\"filter_del\" /></a><br>";
		$out_put_html.="<input id=\"".$this->CleanSliderName($idtxt)."\" type=\"slider\" name=\"".$name."\" value=\"".$min.";".$max."\" /></span>";
		$out_put_html.="<script type=\"text/javascript\">";
		$out_put_html.="$(function() {";
		$out_put_html.="jQuery(\"#".$this->CleanSliderName($idtxt)."\").slider({";
		$out_put_html.="	from: ".$min.",";
  		$out_put_html.="	to: ". $max.",";
    	$out_put_html.="	step: 1,";
  		$out_put_html.="	scale: ".$scale.",";
  		$out_put_html.="	limits: false,";
		$out_put_html.="	round: 2,";
 		$out_put_html.="	dimension: '".$dimension."',";
		$out_put_html.="	format: { format: '##.00' },";
		$out_put_html.="	callback: function( value ){";
		//$out_put_html.="	// console.dir( this );";
		$out_put_html.="	var nvalues=value.split(\";\");";
					
		// if ($is_ajax){ 		
				$out_put_html.="url='".htmlspecialchars_decode($ajax_url_slider)."='+nvalues[0]+'".urlencode($dimension).":'+nvalues[1]+'".urlencode($dimension)."';";
		 //}else{
				$out_put_html.="url2='".htmlspecialchars_decode($filter_url_slider)."='+nvalues[0]+'".urlencode($dimension).":'+nvalues[1]+'".urlencode($dimension)."';";
		// }
		
		$out_put_html.="delayShowData(url,".$is_ajax.",url2);";
		$out_put_html.="	}";
		$out_put_html.="});";
		$out_put_html.="});";
		$out_put_html.="</script>";
    	$out_put_html.="</div>";
		return $out_put_html;
	}
	
	
	public function getSliderHtmlwithUnits($idtxt,$scale,$min,$max,$dimension,$name,$is_ajax,$ajax_url,$url){
		
		$out_put_html='';
		
		$out_put_html.="<div class=\"slider\">";	
		
		
		$out_put_html.="<input id=\"".$this->CleanSliderName($idtxt)."\" type=\"slider\" name=\"".$name."\" value=\"".$min.";".$max."\" /></span>";
		$out_put_html.="<script type=\"text/javascript\">";
		$out_put_html.="$(function() {";
		$out_put_html.="jQuery(\"#".$this->CleanSliderName($idtxt)."\").slider({";
		$out_put_html.="	from: ".$min.",";
  		$out_put_html.="	to: ". $max.",";
    	$out_put_html.="	step: 1,";
  		$out_put_html.="	scale: ".$scale.",";
  		$out_put_html.="	limits: false,";
		$out_put_html.="	round: 2,";
 		$out_put_html.="	dimension: '".$dimension."',";
		$out_put_html.="	format: { format: '##.00' },";
		$out_put_html.="	callback: function( value ){";
		//$out_put_html.="	// console.dir( this );";
		$out_put_html.="	var nvalues=value.split(\";\");";
					
		  // if ($is_ajax){ 		
				$out_put_html.="url='".htmlspecialchars_decode($ajax_url)."='+nvalues[ 0 ]+'".urlencode($dimension).":'+nvalues[ 1 ]+'".urlencode($dimension)."';";
		  // }else{
				$out_put_html.="url2='". htmlspecialchars_decode($url)."='+nvalues[ 0 ]+'".urlencode($dimension).":'+nvalues[ 1 ]+'".urlencode($dimension)."';";
		 //  }
		
		
		$out_put_html.="delayShowData(url,".$is_ajax.",url2);";
		$out_put_html.="	}";
		$out_put_html.="});";
		$out_put_html.="});";
		$out_put_html.="</script>";
    	$out_put_html.="</div>";
		return $out_put_html;
	}
	
		
	
	public function getOneHtml($name,$total,$data_settings, $product_info=0){
		
		
		
			if ($product_info=="1" || $product_info=="2" || $product_info=="3"){
          
               $val=$this->length->format($name, $this->config->get('config_length_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }elseif($product_info=="8" ) { 
          
               $val=$this->weight->format($name, $this->config->get('config_weight_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }else{
				
				$val=$name;
				
			}
		
		
		
		
		
		$out_put_html='';

		if($val=='Exclude Out Of Stock'){$total=0;}
		if($data_settings['count_products']) {
        	// $out_put_html.="<span class=\"seleccionado\"><em>&nbsp;</em>".$val." (".$total.")</span>";
        	$out_put_html.="<span class=\"seleccionado\"><em>&nbsp;</em>".$val."</span>";
        }else{ 
         	$out_put_html.="<span class=\"seleccionado\"><em>&nbsp;</em>".$val."</span>";
        }

	    
		return $out_put_html;
	
	}
	
	public function getImageHtml($data,$data_settings,$name){
		
		$out_put_html='';
		$out_put_html.="<div style=\"margin-left: 6px;\" class=\"color_matrix\">";
		$out_put_html.="<ul>";
		   
		  foreach ($data as $value){ 
	          ($data_settings['track_google']) ? $gap=trim($name)."@@@@@@".trim($value['name']) : $gap="no";    
				
			   $out_put_html.="<li><a class=\"smenu {dnd:'".$value['href']."', ajaxurl:'". $value['ajax_url']."', gapush:'". addslashes($gap)."'}\" href=\"javascript:void(0)\" ". $data_settings['nofollow']."><img class=\"picker\" src=\"".$value['image_thumb']."\" original-title=\"".utf8_strtoupper($value['name'])."\" alt=\"".utf8_strtoupper($value['name'])."\"/></a></li>";
		   } 
		 $out_put_html.="</ul></div>";
			
		  
		return $out_put_html;
	
	}
	
	public function GetHtmlSelected($data_filtering,$data_settings,$product_info=0){
		
			
		if ($product_info=="w" || $product_info=="l" || $product_info=="h"){
          
               $val=$this->length->format($data_filtering['name'], $this->config->get('config_length_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }elseif($product_info=="wg" ) { 
          
               $val=$this->weight->format($data_filtering['name'], $this->config->get('config_weight_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }else{
				
				$val=$data_filtering['name'];
				
			}
		
		//echo $val; die;

		$html="<ul>";
		$html.="<li class=\"active\"><em>&nbsp;</em> <a class=\"link_filter_del smenu {dnd:'".$data_filtering['href']."', ajaxurl:'".$data_filtering['ajax_url']."', gapush:'no'}\" href=\"javascript:void(0)\"  ".$data_settings['nofollow']."><img src=\"image/supermenu/spacer.gif\" alt=\"".$data_filtering['remove_filter_text']."\" class=\"filter_del\" /></a> <span>".$val." </span></li>";
		if ($data_filtering['see_more_url']){ 
        $html.="<li class=\"more_filters\"><a href=\"javascript:void(0)\" class=\"all_filters light small {dnd:'".$data_filtering['see_more_url']."'}\" rel=\"nofollow\">".$data_filtering['see_more_text']."</a></li>";             		    
		} 
        $html.="</ul>";
	
	
		return $html;
				
	}

	public function GetHtmlImageSelected($data_filtering,$data_settings){
	   //$count=$data_settings['count_products'] ? "&nbsp;<span class=\"product-count\">(". $total.")</span>" : "";
       $html="<ul>";
	   $html.="<li class=\"active\"><img class=\"picker\" align=\"absmiddle\" src=\"".$data_filtering['image']."\" title=\"".utf8_strtoupper($data_filtering['name'])."\" original-title=\"".utf8_strtoupper($data_filtering['name'])."\" alt=\"".utf8_strtoupper(str_replace("&amp;","&",$data_filtering['name']))."\"/> <a class=\"link_filter_del smenu {dnd:'".$data_filtering['href']."', ajaxurl:'".$data_filtering['ajax_url']."', gapush:'no'}\" href=\"javascript:void(0)\" ".$data_settings['nofollow']."\> <img src=\"image/supermenu/spacer.gif\" alt=\"".$data_filtering['remove_filter_text']."\" class=\"filter_del\" /></a> <span>".$data_filtering['name']."</span></li>";
      
	  if ($data_filtering['see_more_url']){ 
          $html.="<li class=\"more_filters\"><a href=\"javascript:void(0)\" class=\"all_filters light small {dnd:'".$data_filtering['see_more_url']."'}\" rel=\"nofollow\">".$data_filtering['see_more_text']."</a></li>";
       } 
       $html.="</ul>";
	   
	   return $html;
	   		
	}
		
	public function getImageHtmlReview($data,$data_settings,$name, $extra_text){
		$out_put_html='';
		$out_put_html.="<div style=\"margin-left: 6px;\" class=\"color_matrix2\">";
		$out_put_html.="<ul>";
    	  foreach ($data as $value){ 
	          ($data_settings['track_google']) ? $gap=trim($name)."@@@@@@".trim($value['name']) : $gap="no";    
			  ($data_settings['count_products']) ? $count=" <span class=\"product-count\">(". $value['total'] .")</span>" : $count="";
		   $out_put_html.="<li><a class=\"smenu {dnd:'".$value['href']."', ajaxurl:'". $value['ajax_url']."', gapush:'". addslashes($gap)."'}\" href=\"javascript:void(0)\" ". $data_settings['nofollow']."><img align=\"absmiddle\" class=\"picker\" src=\"catalog/view/theme/default/image/stars-". $value['name'].".png\"  original-title=\"". sprintf($extra_text,$value['name'])."\" alt=\"". sprintf($extra_text,$value['name'])."\"/></a> ".$count."</li>";
		   } 
		 $out_put_html.="</ul></div>";
		 
		return $out_put_html;
	
	}
	
	public function getOneHtmlReview($name,$total,$data_settings,$extra_text){
		
		$count=$data_settings['count_products'] ? "&nbsp;<span class=\"product-count\">(". $total.")</span>" : "";
		$out_put_html='';
		$out_put_html.="<img class=\"picker\" align=\"absmiddle\" src=\"catalog/view/theme/default/image/stars-". $name.".png\" original-title=\"". sprintf($extra_text,$name)."\" alt=\"". sprintf($extra_text,$name)."\"/></a>".$count;
        
		return $out_put_html;
	
	}
	
	public function GetHtmlImageSelectedReviews($data_filtering,$data_settings){
	 //  $count=$data_settings['count_products'] ? "&nbsp;<span class=\"product-count\">(". $total.")</span>" : "";
	   $html="<ul>";
	   $html.="<li class=\"active\"><img class=\"picker\" align=\"absmiddle\" src=\"catalog/view/theme/default/image/stars-". $data_filtering['filter_rating'].".png\" original-title=\"". sprintf($data_filtering['rating_extra_txt'],$data_filtering['filter_rating'])."\" alt=\"". sprintf($data_filtering['rating_extra_txt'],$data_filtering['filter_rating'])."\"/></a> <a class=\"link_filter_del smenu {dnd:'".$data_filtering['href']."', ajaxurl:'".$data_filtering['ajax_url']."', gapush:'no'}\" href=\"javascript:void(0)\" ".$data_settings['nofollow']."\> <img src=\"image/supermenu/spacer.gif\" alt=\"".$data_filtering['remove_filter_text']."\" class=\"filter_del\" /></a></li>";
       if ($data_filtering['see_more_url']){ 
          $html.="<li class=\"more_filters\"><a href=\"javascript:void(0)\" class=\"all_filters light small {dnd:'".$data_filtering['see_more_url']."'}\" rel=\"nofollow\">".$data_filtering['see_more_text']."</a></li>";
       } 
       $html.="</ul>";
	   
	   return $html;
	   		
	}
		
		
	public function getSelectHtml($data,$data_settings,$name,$product_info=0){
		$this->language->load('module/supercategorymenuadvanced');
		
		$out_put_html='';
		$out_put_html.="<select name=\"select\" class=\"smenu\">";
        $out_put_html.="<option value=\"0\" selected=\"selected\">- ".$this->language->get('txt_select_on_select')."&nbsp;".$name." -</option>";
        
		foreach ($data as $value){ 
		
		
		if ($product_info=="1" || $product_info=="2" || $product_info=="3"){
          
               $val=$this->length->format($value['name'], $this->config->get('config_length_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }elseif($product_info=="8" ) { 
          
               $val=$this->weight->format($value['name'], $this->config->get('config_weight_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }else{
				
				$val=$value['name'];
				
			}
		
			if($val=='Exclude Out Of Stock'){$count='';}
         ($data_settings['count_products'])? $count="&nbsp;(". $value['total'] .")" : $count="";
   		 ($data_settings['track_google']) ? $gap=trim($name)."@@@@@@".trim($value['name']) : $gap="no";   
		 
		 $out_put_html.="<option class=\"smenu {dnd:'".$value['href']."', ajaxurl:'". $value['ajax_url']."', gapush:'". addslashes($gap)."'}\">".$val.$count."</option>";
		 
		 } 
         $out_put_html.=" </select>";
		
		 return $out_put_html;
	
	}
	
	
    public function getListHtml($data,$data2,$data_settings,$name,$i,$searchinput,$product_info=0){
				
		$this->language->load('module/supercategorymenuadvanced');
		$out_put_html='';


		if (!empty($data2)){ //array_slice
		
			$out_put_html.="<ul id=\"results_container_".$i."\">";
		
			foreach ($data2 as $value){
			($data_settings['count_products'])? $count=" <span class=\"product-count\">(". $value['total'] .")</span>" : $count="";
			($data_settings['track_google']) ? $gap=trim($name)."@@@@@@".trim($value['name']) : $gap="no";		
			
			
			if ($product_info=="1" || $product_info=="2" || $product_info=="3"){
          
               $val=$this->length->format($value['name'], $this->config->get('config_length_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }elseif($product_info=="8" ) { 
          
               $val=$this->weight->format($value['name'], $this->config->get('config_weight_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }else{
				
				$val=$value['name'];
				
			}
			
			 if($val=='Exclude Out Of Stock'){$count='';}
			$out_put_html.="<li><em>&nbsp;</em><a class=\"smenu {dnd: '".$value['href']."', ajaxurl:'".$value['ajax_url']."', gapush:'".addslashes($gap)."'}\" href=\"javascript:void(0)\" ". $data_settings['nofollow'].">".$val."</a>". $count."</li>";
           	}

            $out_put_html.="<li class=\"more_filters1\"><a href=\"javascript:void(0)\" class=\"light small\" rel=\"nofollow\">".$this->language->get('see_more_text')."</a></li>";
            $out_put_html.="</ul>";
			
		    $out_put_html.="<dd style=\"display: none;\" class=\"page_preload\">";
        	$out_put_html.="<div id=\"search_container_".$i."\" >";
            
            if ($searchinput=="yes"){ 
            $out_put_html.="<input name=\"search\" type=\"text\"  id=\"search".$i."\" onclick=\"this.value = '';\" class=\"search-box-bg\" onkeyup=\"refineResults(event,this,'search_container_".$i."','#search_container_".$i."')\" value=\"".$this->language->get('search_in')."\"  />";
            } 
            $out_put_html.="<ul>";
            
			foreach ($data as $value){ 
			
			
			if ($product_info=="1" || $product_info=="2" || $product_info=="3"){
          
               $val=$this->length->format($value['name'], $this->config->get('config_length_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }elseif($product_info=="8" ) { 
          
               $val=$this->weight->format($value['name'], $this->config->get('config_weight_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }else{
				
				$val=$value['name'];
				
			}
			
			if($val=='Exclude Out Of Stock'){$count='';}
			($data_settings['count_products'])? $count=" <span class=\"product-count\">(". $value['total'] .")</span>" : $count="";
			($data_settings['track_google']) ? $gap=trim($name)."@@@@@@".trim($value['name']) : $gap="no";		
			$out_put_html.="<li><em>&nbsp;</em><a class=\"smenu {dnd: '".$value['href']."', ajaxurl:'".$value['ajax_url']."', gapush:'".addslashes($gap)."'}\" href=\"javascript:void(0)\" ".$data_settings['nofollow'].">".$val."</a>". $count."</li>";
            
			}
        	$out_put_html.="</ul>";
        	$out_put_html.="  </div>";
        	$out_put_html.="</dd>";
		}else{
			 	
			$out_put_html.="<ul>";
			
			foreach ($data as $value){ 
			
			($data_settings['count_products'])? $count=" <span class=\"product-count\">(". $value['total'] .")</span>" : $count="";
			($data_settings['track_google']) ? $gap=trim($name)."@@@@@@".trim($value['name']) : $gap="no";	
			
			
			if ($product_info=="1" || $product_info=="2" || $product_info=="3"){
          
               $val=$this->length->format($value['name'], $this->config->get('config_length_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }elseif($product_info=="8" ) { 
          
               $val=$this->weight->format($value['name'], $this->config->get('config_weight_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
          
            }else{
				
				$val=$value['name'];
				
			}
			
			 if($val=='Exclude Out Of Stock'){$count='';}
			 $out_put_html.="<li><em>&nbsp;</em><a class=\"smenu {dnd: '".$value['href']."', ajaxurl:'".$value['ajax_url']."', gapush:'".addslashes($gap)."'}\" href=\"javascript:void(0)\" ". $data_settings['nofollow'].">".$val."</a>". $count."</li>";
            
			}
		
			$out_put_html.="</ul>";
           
		}

		//echo $out_put_html; die;
		
		
		return $out_put_html;
		
		
	
	
	}
	
	 public function GetView($str){
		  
		 if ($str=="slider") {
			return "s";
		 }elseif ($str=="image"){
			return "i";						
		 }elseif($str=="list"){
			return "n";
		 }elseif($str=="sele"){
			return "n";
		 }elseif($str=="sept"){
			return "p";
		 }
	
	  }
	
	 public function GetProductInfo($int){
				
		$results=array(1=>"w",2=>"h",3=>"l",4=>"mo",5=>"sk",6=>"up",7=>"lo",8=>"wg",9=>"e",10=>"i",11=>"p",12=>"j",);
		
		return $results[$int];
			
      }
	
	


public function resize($filename, $width, $height) {
		if (!file_exists(DIR_IMAGE . $filename) || !is_file(DIR_IMAGE . $filename)) {
			return;
		} 
		
		$info = pathinfo($filename);
		$extension = $info['extension'];
		
		$old_image = $filename;
		$new_image = 'cache/' . substr($filename, 0, strrpos($filename, '.')) . '-' . $width . 'x' . $height . '.' . $extension;
		
		if (!file_exists(DIR_IMAGE . $new_image) || (filemtime(DIR_IMAGE . $old_image) > filemtime(DIR_IMAGE . $new_image))) {
			$path = '';
			
			$directories = explode('/', dirname(str_replace('../', '', $new_image)));
			
			foreach ($directories as $directory) {
				$path = $path . '/' . $directory;
				
				if (!file_exists(DIR_IMAGE . $path)) {
					@mkdir(DIR_IMAGE . $path, 0777);
				}		
			}
			
			$image = new Image(DIR_IMAGE . $old_image);
			$image->resize($width, $height);
			$image->save(DIR_IMAGE . $new_image);
		}
		
		if (isset($this->request->server['HTTPS']) && (($this->request->server['HTTPS'] == 'on') || ($this->request->server['HTTPS'] == '1'))) {
			return HTTPS_IMAGE . $new_image;
		} else {
			return HTTP_IMAGE . $new_image;
		}	
	}
	
	
	public function getCacheSMBD($key,$cat,$man,$what="C",$table="cache_supercategory") {
		
		if ($what=="C"){ 
			$query = $this->db->query("SELECT data,cache_id FROM " . DB_PREFIX . $table." cs WHERE cs.cat = '" . $cat . "' AND cs.name = '" . $key. "' LIMIT 1");
		}else{
			$query = $this->db->query("SELECT data,cache_id FROM " . DB_PREFIX . $table." cs WHERE cs.man = '" . $man . "' AND cs.name = '" . $key. "' LIMIT 1");
		}
		
		if ($query->num_rows) {
			$this->db->query("UPDATE " . DB_PREFIX . $table." cs SET cs.cached=cs.cached+1 WHERE cs.cache_id = '" . $query->row['cache_id'] . "'");
			return unserialize($query->row['data']);
		}
	}

  	public function setCacheSMBD($key,$value,$cat,$man,$what="C",$string,$table="cache_supercategory") {
		
		$this->db->query("DELETE FROM " . DB_PREFIX . $table." WHERE name LIKE  '" . $key . "%'");
		
		if($this->config->get('supercategorymenuadvanced_mode')=="Production"){
			$this->db->query("INSERT INTO " . DB_PREFIX . $table." 
			SET 
			`cache_id` = '', 
			`cat` = '" . $this->db->escape($cat) . "', 
			`man` = '" . $this->db->escape($man) . "', 
			`store_id` = '" . (int)$this->config->get('config_store_id'). "', 
			`name` = '" . $this->db->escape($key) . "', 
			`string` = '" . $this->db->escape($string) . "', 
			`data` = '" . $this->db->escape(serialize($value)) . "'");
		}
	}
	
	
	
	
	
	
	
}
?>
