<modification> 
	<id>PHPMailer</id> 
	<version>2.6</version> 
	<vqmver>1.0.4</vqmver>
	<author>Opencart-templates</author>
	<comments><![CDATA[
		This vqmod replaces the Core mail.php class with a wrapper for phpmailer.

		For this to work correctly you need to set this up with an email account instead of PHP mail()
		
		As an example we can use google mail settings:
		Mail Protocol: SMTP
		SMTP Host: smtp.gmail.com (OR smtp.yourmail.server)
		SMTP Username: myemail@googlemail.com
		SMTP Password: password
		SMTP Port: 465 (465=SSL // 587=TLS // 25=SMTP standard)
				
		Note:
		- For SSL you may need to enable extension: php_openssl
		- There is no guarantee this will work with your email hosting provider, depending if they allow remote emails to be sent.
	]]></comments> 
		
	<file name="system/library/mail.php">
		<operation>
			<search position="before"><![CDATA[
			class Mail
			]]></search>
			<add><![CDATA[include_once(DIR_SYSTEM . 'library/shared/phpmailer/PHPMailerAutoload.php');]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[public function send() {]]></search>
			<add><![CDATA[
	public function _sendPhpMailer() {
		if (!$this->to) {
			trigger_error('Error: E-Mail to required!');
			exit();			
		}

		if (!$this->from) {
			trigger_error('Error: E-Mail from required!');
			exit();					
		}

		if (!$this->sender) {
			trigger_error('Error: E-Mail sender required!');
			exit();					
		}

		if (!$this->subject) {
			trigger_error('Error: E-Mail subject required!');
			exit();					
		}

		if ((!$this->text) && (!$this->html)) {
			trigger_error('Error: E-Mail message required!');
			exit();					
		}
		
		$debugMode = false;
				
		$mail  = new PHPMailer($debugMode);
		
		$mail->CharSet = "UTF-8";
				
		$mail->Subject = $this->subject;
		
		if (is_array($this->to)) {
			foreach ($this->to as $to){
				$mail->AddAddress($to);
			}
		} else {
			$mail->AddAddress($this->to);
		}
		
		$mail->SetFrom($this->from, $this->sender);
		
		if($this->replyTo){
			if($this->replyToName){
				$mail->AddReplyTo($this->replyTo, $this->replyToName);
			} else {
				$mail->AddReplyTo($this->replyTo, $this->sender);
			}
		} else {
			$mail->AddReplyTo($this->from, $this->sender);
		}
		
		if($this->cc){
			$mail->AddCC($this->cc);
		}
		
		if($this->bcc){
			$mail->AddBCC($this->bcc);
		}
		
		if (!$this->html) {
			$mail->Body = $this->text;
		} else {
			$mail->MsgHTML($this->html);
			if ($this->text) {
				$mail->AltBody = $this->text;
			}
		}

		if($this->attachments){
			foreach ($this->attachments as $attachment) {
				if (file_exists($attachment)) {
					$mail->AddAttachment($attachment);
				}
			}
		}

		if ($this->protocol == 'smtp') {
			$mail->IsSMTP();
			$mail->Host = $this->hostname;
			$mail->Port = $this->port;
			$mail->SMTPDebug = ($debugMode) ? 1 : 0; 
			if($this->port == '587'){
				$mail->SMTPAuth = true;
				$mail->SMTPSecure = "tls";
			} elseif ($this->port == '465') {
				$mail->SMTPAuth = true;
				$mail->SMTPSecure = "ssl";
			}
			if (!empty($this->username)  && !empty($this->password)) {
				$mail->SMTPAuth = true;
				$mail->Username = html_entity_decode($this->username, ENT_QUOTES, 'UTF-8');				
				$mail->Password = html_entity_decode($this->password, ENT_QUOTES, 'UTF-8');	
			}
		}
		
		if($debugMode){
			try {
				$mail->Send();
			} catch(phpmailerException $e) {
				trigger_error($e->errorMessage());
			} catch(Exception $e) {
				trigger_error($e->getMessage());
			}
		} else {
			$mail->Send();
		}		
	} ]]></add>
		</operation>
		
		<operation>
			<search position="after"><![CDATA[public function send() {]]></search>
			<add><![CDATA[return $this->_sendPhpMailer();]]></add>
		</operation>

	</file>
</modification>