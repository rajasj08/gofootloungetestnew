<?php
class ModelModuleSuperManufacturerMenuAdvanced extends Model { public function getManufacturers($store_id=0) { $query = $this->db->query("SELECT * FROM " . DB_PREFIX . "manufacturer m LEFT JOIN " . DB_PREFIX . "manufacturer_to_store m2s ON (m.manufacturer_id = m2s.manufacturer_id) WHERE m2s.store_id = '".(int)$store_id."' ORDER BY name"); $manufacturer_data = $query->rows; return $manufacturer_data; } public function getManufacturerAttributes($manufacturer_id, $store_id) { $cache = md5($manufacturer_id); $manufacturer_attribute_data = $this->model_module_supercategorymenuadvanced->getCacheSMBD('admin_manufacturers_store('.$store_id.')'.$manufacturer_id.'_attributes.' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id') . $cache,'admin'); if (!$manufacturer_attribute_data) { $sql="SELECT pa.attribute_id, ad.name FROM " . DB_PREFIX . "product_attribute pa 		LEFT JOIN " . DB_PREFIX . "attribute a ON (pa.attribute_id = a.attribute_id) LEFT JOIN " . DB_PREFIX . "attribute_description ad ON (a.attribute_id = ad.attribute_id) LEFT JOIN " . DB_PREFIX . "product p ON (p.product_id = pa.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id)"; if ((int)$manufacturer_id==0){ $sql.="WHERE p2s.store_id = '" . (int)$store_id . "' AND ad.language_id = '" . (int)$this->config->get('config_language_id') . " ' GROUP BY pa.attribute_id ORDER BY a.sort_order"; }else{ $sql.="WHERE p.manufacturer_id= '" . (int)$manufacturer_id . "' AND p2s.store_id = '" . (int)$store_id . "' AND ad.language_id = '" . (int)$this->config->get('config_language_id') . " ' GROUP BY pa.attribute_id ORDER BY a.sort_order"; } $manufacturer_attribute_data = array(); $manufacturer_attribute_query = $this->db->query($sql); $manufacturer_attribute_data =$manufacturer_attribute_query->rows; $this->model_module_supercategorymenuadvanced->setCacheSMBD('admin_manufacturers_store('.$store_id.')'.$manufacturer_id.'_attributes.' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id') . $cache, $manufacturer_attribute_data,'admin'); } return $manufacturer_attribute_data; } public function getAttributeValuesManufacturers($attribute_id,$manufacturer_id,$store_id) { $attribute_data = array(); $sql="SELECT distinct pa.text,pa.attribute_id, ad.name,  pa.language_id FROM " . DB_PREFIX . "product_attribute pa LEFT JOIN " . DB_PREFIX . "attribute a ON (pa.attribute_id = a.attribute_id) LEFT JOIN " . DB_PREFIX . "attribute_description ad ON (a.attribute_id = ad.attribute_id) LEFT JOIN " . DB_PREFIX . "product p ON (pa.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (pa.product_id = p2s.product_id) WHERE p.manufacturer_id = '" . (int)$manufacturer_id . "' AND ad.language_id = '" . (int)$this->config->get('config_language_id') . "' AND pa.attribute_id = '" . (int)$attribute_id . "' AND	p2s.store_id = '" . (int)$store_id . "' limit 20"; $query = $this->db->query($sql); foreach ($query->rows as $result) { $attribute_data[$result['language_id']][] = $result['text']; } return $attribute_data; } public function getManufacturerOptions($manufacturer_id,$store_id) { $cache = md5($manufacturer_id); $manufacturer_options_data = $this->model_module_supercategorymenuadvanced->getCacheSMBD('admin_manufacturers_'.$manufacturer_id.'_options_store('.$store_id.')' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id') . $cache,'admin'); if (!$manufacturer_options_data) { $sql="SELECT * FROM " . DB_PREFIX . "product_option po LEFT JOIN " . DB_PREFIX . "product p ON ( po.product_id = p.product_id ) LEFT JOIN " . DB_PREFIX . "option_description od ON ( od.option_id = po.option_id ) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (po.product_id = p2s.product_id) LEFT JOIN `" . DB_PREFIX . "option` o ON (po.option_id = o.option_id)"; if ((int)$manufacturer_id==0){ $sql.=" WHERE p2s.store_id = '" . (int)$store_id . "' AND od.language_id = '" . (int)$this->config->get('config_language_id') . " ' GROUP BY od.option_id ORDER BY o.sort_order"; }else{ $sql.=" WHERE p.manufacturer_id = '" . (int)$manufacturer_id . "' AND p2s.store_id = '" . (int)$store_id . "' AND od.language_id = '" . (int)$this->config->get('config_language_id') . " ' GROUP BY od.option_id ORDER BY o.sort_order"; } $manufacturer_options_data = array(); $manufacturer_options_query = $this->db->query($sql); $manufacturer_options_data =$manufacturer_options_query->rows; $this->model_module_supercategorymenuadvanced->setCacheSMBD('admin_manufacturers_'.$manufacturer_id.'_options_store('.$store_id.')' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id') . $cache, $manufacturer_options_data,'admin'); } return $manufacturer_options_data; } public function getOptionsValuesManufacturers($option_id,$manufacturer_id,$store_id) { $options_data = array(); $sql="SELECT distinct pov.option_value_id, ovd.name, ovd.language_id FROM " . DB_PREFIX . "product_option_value pov LEFT JOIN  " . DB_PREFIX . "option_value_description ovd ON (pov.option_value_id=ovd.option_value_id) LEFT JOIN  " . DB_PREFIX . "product p ON (pov.product_id=p.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (pov.product_id = p2s.product_id) WHERE p.manufacturer_id = '" . (int)$manufacturer_id . "' AND pov.option_id = '" . (int)$option_id. "' AND ovd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p2s.store_id = '" . (int)$store_id . "' LIMIT 20"; $query = $this->db->query($sql); foreach ($query->rows as $result) { $options_data[$result['language_id']][] = $result['name']; } return $options_data; } public function getProductInfoValues($what,$manufacturer_id,$store_id) { $product_info_data = array(); $sql="SELECT DISTINCT p.".$what." FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE p2s.store_id = '" . (int)$store_id . "'"; if (!$manufacturer_id==0){ $sql.="AND p.manufacturer_id = '" . (int)$manufacturer_id . "' "; } $sql.=" LIMIT 20"; $query = $this->db->query($sql); foreach ($query->rows as $result) { $product_info_data[] = $result[$what]; } return $product_info_data; } } ?>